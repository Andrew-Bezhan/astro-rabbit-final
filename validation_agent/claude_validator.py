"""
–ê–≥–µ–Ω—Ç-–≤–∞–ª–∏–¥–∞—Ç–æ—Ä –Ω–∞ –±–∞–∑–µ Claude-3.5-Sonnet –æ—Ç Anthropic
"""

import os
import aiohttp
import json
import traceback
from typing import Dict, Any, List, Tuple
from utils.logger import setup_logger

logger = setup_logger()


class ClaudeValidatorAgent:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –Ω–∞ Claude-3.5-Sonnet"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Claude –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞"""
        self.api_key = os.getenv('ANTHROPIC_API_KEY')
        self.model = "claude-3-5-sonnet-20241022"
        self.api_url = "https://api.anthropic.com/v1/messages"
        self.max_tokens = 2000
        
        if self.api_key:
            logger.info("‚úÖ Claude –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            logger.warning("‚ö†Ô∏è ANTHROPIC_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
    
    async def validate_and_score(self, text: str, original_prompt: str, analysis_type: str = "zodiac") -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—Ü–µ–Ω–∫–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Claude
        """
        if not self.api_key:
            return {
                'score': 5.0,
                'is_valid': False,
                'issues': ['API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'],
                'suggestions': [],
                'fixed_text': text
            }
        
        validation_prompt = f"""
–¢—ã - —Å—Ç—Ä–æ–≥–∏–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è Telegram –±–æ—Ç–∞. –û—Ü–µ–Ω–∏ —ç—Ç–æ—Ç –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ—Ç 1 –¥–æ 10.

–ö–†–ò–¢–ï–†–ò–ò –û–¶–ï–ù–ö–ò:

1. –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï (–ö–†–ò–¢–ò–ß–ù–û):
- HTML —Ç–µ–≥–∏ (<p>, <h1>, <b>, <i>) = 0 –±–∞–ª–ª–æ–≤
- Markdown (**, __, ##, ---) = 0 –±–∞–ª–ª–æ–≤  
- –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å —ç–º–æ–¥–∑–∏ "üåü –ù–∞–∑–≤–∞–Ω–∏–µ" = +2 –±–∞–ª–ª–∞
- –°–ø–∏—Å–∫–∏ —Å —ç–º–æ–¥–∑–∏ (‚≠ê, üéØ, üí´) –≤–º–µ—Å—Ç–æ ‚Ä¢ –∏–ª–∏ * = +2 –±–∞–ª–ª–∞

2. –°–¢–†–£–ö–¢–£–†–ê (–ö–†–ò–¢–ò–ß–ù–û):
–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 6 –±–ª–æ–∫–æ–≤:
üåü –í–õ–ò–Ø–ù–ò–ï –ó–ù–ê–ö–ê –ó–û–î–ò–ê–ö–ê –ù–ê –ö–û–ú–ü–ê–ù–ò–Æ
üîÆ –ü–õ–ê–ù–ï–¢–ê–†–ù–û–ï –í–õ–ò–Ø–ù–ò–ï –ò –ì–ï–û–ì–†–ê–§–ò–Ø
üíé –°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´ –ò –ü–û–¢–ï–ù–¶–ò–ê–õ
üßò –§–ò–õ–û–°–û–§–ò–Ø –ò –ö–û–ù–¶–ï–ü–¶–ò–Ø –ë–ò–ó–ù–ï–°–ê
‚ö†Ô∏è –†–ò–°–ö–ò –ò –ù–û–í–û–°–¢–ù–û–ô –ö–û–ù–¢–ï–ö–°–¢
üíº –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ò –ü–†–ò–ú–ï–†–´ –ö–û–ú–ü–ê–ù–ò–ô

3. –°–û–î–ï–†–ñ–ê–ù–ò–ï (–ö–†–ò–¢–ò–ß–ù–û):
- –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π = +2 –±–∞–ª–ª–∞
- –ü—Ä–∏–º–µ—Ä—ã –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π = +2 –±–∞–ª–ª–∞
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω = +2 –±–∞–ª–ª–∞

–í–ï–†–ù–ò –¢–û–õ–¨–ö–û –ß–ò–°–õ–û –û–¢ 1 –î–û 10. –ù–∞–ø—Ä–∏–º–µ—Ä: 8.5

–¢–ï–ö–°–¢ –î–õ–Ø –û–¶–ï–ù–ö–ò:
{text}
"""
        
        try:
            async with aiohttp.ClientSession() as session:
                headers = {
                    'x-api-key': self.api_key,
                    'content-type': 'application/json',
                    'anthropic-version': '2023-06-01'
                }
                
                payload = {
                    'model': self.model,
                    'max_tokens': 100,
                    'messages': [
                        {
                            'role': 'user',
                            'content': validation_prompt
                        }
                    ]
                }
                
                async with session.post(self.api_url, headers=headers, json=payload) as response:
                    if response.status == 200:
                        result = await response.json()
                        content = result['content'][0]['text'].strip()
                        
                        try:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –æ—Ü–µ–Ω–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
                            import re
                            
                            # –ò—â–µ–º —á–∏—Å–ª–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –≤ —Ç–µ–∫—Å—Ç–µ
                            number_pattern = r'(\d+(?:[.,]\d+)?)'
                            matches = re.findall(number_pattern, content)
                            
                            if matches:
                                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
                                score_text = matches[0].replace(',', '.')
                                score = float(score_text)
                                
                                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 1-10
                                score = max(1.0, min(10.0, score))
                            else:
                                # –ï—Å–ª–∏ —á–∏—Å–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                                logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —á–∏—Å–ª–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ Claude")
                                score = 7.0
                            
                            logger.info(f"‚úÖ Claude –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Ü–µ–Ω–∫–∞ {score}/10")
                            
                            return {
                                'score': score,
                                'is_valid': score >= 7.0,
                                'confidence': 0.9,
                                'issues': [],
                                'suggestions': []
                            }
                            
                        except Exception as e:
                            logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ü–µ–Ω–∫–∏ Claude: %s", str(e))
                            logger.warning("–û—Ç–≤–µ—Ç Claude: %s", content[:200])
                            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
                            return {
                                'score': 7.0,
                                'is_valid': True,
                                'confidence': 0.5,
                                'issues': [f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}"],
                                'suggestions': []
                            }
                    else:
                        logger.warning("‚ö†Ô∏è Claude API –æ—à–∏–±–∫–∞: %s", response.status)
                        
        except Exception as e:
            logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ Claude –≤–∞–ª–∏–¥–∞—Ü–∏–∏: %s", str(e))
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return {
            'score': 5.0,
            'is_valid': False,
            'issues': ['–û—à–∏–±–∫–∞ API –≤–∞–ª–∏–¥–∞—Ü–∏–∏'],
            'suggestions': [],
            'confidence': 0.0
        }
    
    async def fix_text_with_claude(self, text: str, target_score: float = 10.0, current_score: float = 5.0) -> str:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Claude"""
        if not self.api_key:
            return text
        
        fix_prompt = f"""
–ò–°–ü–†–ê–í–¨ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –î–û –î–û–°–¢–ò–ñ–ï–ù–ò–Ø –û–¶–ï–ù–ö–ò 10.0/10 —Å–æ–≥–ª–∞—Å–Ω–æ –í–°–ï–ú —Å—Ç—Ä–æ–≥–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏–∑ –ø—Ä–æ–º–ø—Ç–æ–≤.

–¢–ï–ö–£–©–ê–Ø –û–¶–ï–ù–ö–ê: {current_score}/10
–¶–ï–õ–¨: –¢–û–ß–ù–û 10.0/10

–¢–ï–ö–°–¢ –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
{text}

–°–¢–†–û–ì–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ò–ó –ü–†–û–ú–ü–¢–ê (–ö–ê–ñ–î–û–ï –ù–ê–†–£–®–ï–ù–ò–ï –°–ù–ò–ñ–ê–ï–¢ –û–¶–ï–ù–ö–£):

üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø (–∏—Å–ø—Ä–∞–≤—å –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û):
- –£–î–ê–õ–ò –í–°–ï HTML-—Ç–µ–≥–∏: <p>, <h1>, <h2>, <h3>, <h4>, <b>, <i>, <ul>, <li>, <hr>, <div>
- –£–î–ê–õ–ò –í–°–ï Markdown: **, __, ##, ###, ---, ***
- –ó–ê–ú–ï–ù–ò –æ–±—ã—á–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã (*, -, ‚Ä¢) –Ω–∞ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∏–∫–æ–Ω–∫–∏: ‚≠ê üéØ üí´ ‚ö° üî• üíé üöÄ ‚ö†Ô∏è üí∞
- –ò–°–ü–û–õ–¨–ó–£–ô –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: "üåü –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞"

üö® –°–¢–†–£–ö–¢–£–†–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø (–ë–ï–ó –ò–°–ö–õ–Æ–ß–ï–ù–ò–ô):
–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤–∫–ª—é—á–∏ –í–°–ï 6 –ë–õ–û–ö–û–í –í –ü–†–ê–í–ò–õ–¨–ù–û–ú –ü–û–†–Ø–î–ö–ï:

üåü –ë–õ–û–ö 1 - –í–õ–ò–Ø–ù–ò–ï –ó–ù–ê–ö–ê –ó–û–î–ò–ê–ö–ê –ù–ê –°–£–î–¨–ë–£ –ö–û–ú–ü–ê–ù–ò–ò
–ú–∏–Ω–∏–º—É–º 300 —Å–ª–æ–≤: –ø–æ—ç—Ç–∏—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π –ø—Ä–∏—Ä–æ–¥—ã –∑–Ω–∞–∫–∞, –∫–∞–∫ –∑–Ω–∞–∫ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ —Å—É–¥—å–±—É –∫–æ–º–ø–∞–Ω–∏–∏, –≥–ª—É–±–æ–∫–∏–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã

üîÆ –ë–õ–û–ö 2 - –í–õ–ò–Ø–ù–ò–ï –ü–õ–ê–ù–ï–¢ –ò –ú–ï–°–¢–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò  
–ú–∏–Ω–∏–º—É–º 250 —Å–ª–æ–≤: –≤–ª–∏—è–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç—ã-—É–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–∞ –±–∏–∑–Ω–µ—Å, –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–ª–∞–Ω–µ—Ç–∞—Ä–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã

üíé –ë–õ–û–ö 3 - –°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´ –ò –ü–û–¢–ï–ù–¶–ò–ê–õ –†–û–°–¢–ê
–ú–∏–Ω–∏–º—É–º 300 —Å–ª–æ–≤: –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω –∑–Ω–∞–∫–∞, —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ —Å–ø–æ—Å–æ–±—ã –∏—Ö –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞

üßò –ë–õ–û–ö 4 - –§–ò–õ–û–°–û–§–°–ö–ê–Ø –ö–û–ù–¶–ï–ü–¶–ò–Ø –ö–û–ú–ü–ê–ù–ò–ò
–ú–∏–Ω–∏–º—É–º 250 —Å–ª–æ–≤: —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞, —Å–≤—è–∑—å —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ñ–µ—Ä–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –¥—É—Ö–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã

‚ö†Ô∏è –ë–õ–û–ö 5 - –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –†–ò–°–ö–ò –ò –í–´–ó–û–í–´
–ú–∏–Ω–∏–º—É–º 200 —Å–ª–æ–≤: –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø—Ä–æ—Ü–∏—Ç–∏—Ä—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –æ–±—ä—è—Å–Ω–∏ –∏—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

üíº –ë–õ–û–ö 6 - –ë–ò–ó–ù–ï–°-–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ò –°–¢–†–ê–¢–ï–ì–ò–ò  
–ú–∏–Ω–∏–º—É–º 200 —Å–ª–æ–≤: –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã, –ø—Ä–∏–º–µ—Ä—ã 2-3 –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π —Å —Ç–µ–º –∂–µ –∑–Ω–∞–∫–æ–º

üö® –°–û–î–ï–†–ñ–ê–¢–ï–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—é
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤–∫–ª—é—á–∏ –ø—Ä–∏–º–µ—Ä—ã 2-3 –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π —Å —Ç–µ–º –∂–µ –∑–Ω–∞–∫–æ–º  
- –ù–ï —É–ø–æ–º–∏–Ω–∞–π –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö (newsdata, prokerala, gemini, openai, api)
- –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ—ç—Ç–∏—á–Ω—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã
- –ú–∏–Ω–∏–º—É–º 1500 —Å–ª–æ–≤ –æ–±—â–µ–≥–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞

üö® –Ø–ó–´–ö–û–í–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –¢–û–õ–¨–ö–û —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, —É–≤–µ—Ä–µ–Ω–Ω—ã–π —Ç–æ–Ω
- –û—Ç —ç–∑–æ—Ç–µ—Ä–∏–∫–∏ –∫ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–µ

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: 
- –ù–ï –°–û–ö–†–ê–©–ê–ô —Ç–µ–∫—Å—Ç - —Ç–æ–ª—å–∫–æ –î–û–ü–û–õ–ù–Ø–ô –∏ –£–õ–£–ß–®–ê–ô
- –ö–ê–ñ–î–û–ï —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¢–û–ß–ù–û —Å–æ–±–ª—é–¥–µ–Ω–æ
- –°—Ç—Ä–µ–º–∏—Å—å –∫ –°–û–í–ï–†–®–ï–ù–°–¢–í–£ - –æ—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 10.0/10

–í–ï–†–ù–ò –¢–û–õ–¨–ö–û –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¢–ï–ö–°–¢ –ë–ï–ó –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í.

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
"""
        
        try:
            async with aiohttp.ClientSession() as session:
                headers = {
                    'x-api-key': self.api_key,
                    'content-type': 'application/json',
                    'anthropic-version': '2023-06-01'
                }
                
                payload = {
                    'model': self.model,
                    'max_tokens': self.max_tokens,
                    'messages': [
                        {
                            'role': 'user',
                            'content': fix_prompt
                        }
                    ]
                }
                
                async with session.post(self.api_url, headers=headers, json=payload) as response:
                    if response.status == 200:
                        result = await response.json()
                        fixed_text = result['content'][0]['text'].strip()
                        logger.info("‚úÖ –¢–µ–∫—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Claude")
                        return fixed_text
                    else:
                        logger.warning("‚ö†Ô∏è Claude –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: %s", response.status)
                        
        except Exception as e:
            logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Claude: %s", str(e))
        
        return text
    
    async def iterative_refinement(self, text: str, original_prompt: str, 
                                 analysis_type: str = "zodiac", 
                                 target_score: float = 10.0,
                                 max_iterations: int = 7,
                                 update_callback=None) -> Tuple[str, float]:
        """
        –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–π –æ—Ü–µ–Ω–∫–∏
        """
        current_text = text
        iteration = 0
        
        logger.info(f"üéØ –ù–ê–ß–ò–ù–ê–ï–ú –ò–¢–ï–†–ê–¢–ò–í–ù–û–ï –£–õ–£–ß–®–ï–ù–ò–ï –î–û –û–¶–ï–ù–ö–ò {target_score}/10")
        logger.info("üìä –û–°–ù–û–í–ù–û–ô –ê–ì–ï–ù–¢ –ë–£–î–ï–¢ –°–¢–†–ï–ú–ò–¢–¨–°–Ø –ö –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô –û–¶–ï–ù–ö–ï")
        
        while iteration < max_iterations:
            iteration += 1
            logger.info("=" * 60)
            logger.info(f"üîÑ –ò–¢–ï–†–ê–¶–ò–Ø –£–õ–£–ß–®–ï–ù–ò–Ø #{iteration} –∏–∑ {max_iterations}")
            logger.info(f"üéØ –¶–ï–õ–¨: –¥–æ—Å—Ç–∏—á—å –æ—Ü–µ–Ω–∫–∏ {target_score}/10")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫—É –æ—Ç Claude
            validation_result = await self.validate_and_score(current_text, original_prompt, analysis_type)
            current_score = validation_result.get('score', 5.0)
            
            # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–¶–ï–ù–ö–ò
            logger.info(f"üìä –¢–ï–ö–£–©–ê–Ø –û–¶–ï–ù–ö–ê: {current_score}/10")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—Å–ª–∏ –µ—Å—Ç—å callback
            if update_callback:
                try:
                    await update_callback(f"üîç **–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞...**\n\n"
                                        f"‚è≥ –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration}/{max_iterations}\n"
                                        f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...")
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
            
            # –ü–†–û–í–ï–†–Ø–ï–ú –î–û–°–¢–ò–ñ–ï–ù–ò–ï –¶–ï–õ–ò
            if current_score >= target_score:
                logger.info(f"üéâ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê! –û—Ü–µ–Ω–∫–∞ {current_score}/10 –∑–∞ {iteration} –∏—Ç–µ—Ä–∞—Ü–∏–π")
                logger.info("üèÜ –û–°–ù–û–í–ù–û–ô –ê–ì–ï–ù–¢ –£–°–ü–ï–®–ù–û –î–û–°–¢–ò–ì –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ì–û –ö–ê–ß–ï–°–¢–í–ê!")
                return current_text, current_score
            elif current_score >= 7.0:
                logger.info(f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –ø—Ä–æ–π–¥–µ–Ω: {current_score}/10, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ —Ü–µ–ª–∏ {target_score}")
            else:
                logger.warning(f"‚ö†Ô∏è –û—Ü–µ–Ω–∫–∞ {current_score}/10 –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞ 7.0 - –û–°–ù–û–í–ù–û–ô –ê–ì–ï–ù–¢ –î–û–õ–ñ–ï–ù –£–õ–£–ß–®–ò–¢–¨ –¢–ï–ö–°–¢")
            
            # –£–õ–£–ß–®–ê–ï–ú –¢–ï–ö–°–¢
            logger.info("üîß –û–°–ù–û–í–ù–û–ô –ê–ì–ï–ù–¢ –ü–†–ò–ú–ï–ù–Ø–ï–¢ –£–õ–£–ß–®–ï–ù–ò–Ø...")
            improved_text = await self.fix_text_with_claude(current_text, target_score, current_score)
            
            if improved_text and len(improved_text.strip()) > 100:
                if len(improved_text) < len(current_text) * 0.7:
                    logger.warning(f"‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–æ–∫—Ä–∞—Ç–∏–ª—Å—è —Å {len(current_text)} –¥–æ {len(improved_text)} —Å–∏–º–≤–æ–ª–æ–≤ - –æ—Ç–∫–ª–æ–Ω—è–µ–º")
                    break
                
                current_text = improved_text
                logger.info(f"‚úÖ –û–°–ù–û–í–ù–û–ô –ê–ì–ï–ù–¢ –£–õ–£–ß–®–ò–õ –¢–ï–ö–°–¢ ({len(current_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
                logger.info(f"üîÑ –ü–ï–†–ï–•–û–î–ò–ú –ö –°–õ–ï–î–£–Æ–©–ï–ô –ò–¢–ï–†–ê–¶–ò–ò –î–õ–Ø –î–û–°–¢–ò–ñ–ï–ù–ò–Ø –¶–ï–õ–ò {target_score}/10")
            else:
                logger.warning("‚ö†Ô∏è –û–°–ù–û–í–ù–û–ô –ê–ì–ï–ù–¢ –ù–ï –°–ú–û–ì –£–õ–£–ß–®–ò–¢–¨ –¢–ï–ö–°–¢ - –∑–∞–≤–µ—Ä—à–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏–∏")
                break
        
        logger.warning(f"‚ö†Ô∏è –î–û–°–¢–ò–ì–ù–£–¢–û –ú–ê–ö–°–ò–ú–£–ú –ò–¢–ï–†–ê–¶–ò–ô ({max_iterations})")
        logger.info("üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê...")
        final_result = await self.validate_and_score(current_text, original_prompt, analysis_type)
        final_score = final_result.get('score', 5.0)
        
        logger.info("=" * 60)
        logger.info("üèÅ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        logger.info(f"üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê: {final_score}/10")
        if final_score >= target_score:
            logger.info(f"üéâ –û–°–ù–û–í–ù–û–ô –ê–ì–ï–ù–¢ –î–û–°–¢–ò–ì –¶–ï–õ–ò {target_score}/10!")
        elif final_score >= 7.0:
            logger.info(f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –ø—Ä–æ–π–¥–µ–Ω, –Ω–æ —Ü–µ–ª—å {target_score} –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞")
        else:
            logger.warning(f"‚ùå –û—Ü–µ–Ω–∫–∞ {final_score} –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞ 7.0")
        logger.info("=" * 60)
        
        return current_text, final_score


class AnthropicValidationAgent:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞ Claude"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞"""
        self.claude_validator = ClaudeValidatorAgent()
        logger.info("‚úÖ Anthropic –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def validate_and_fix(self, text: str, analysis_type: str = "zodiac", original_prompt: str = "") -> str:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        """
        try:
            # –°–¢–†–ï–ú–ò–ú–°–Ø –ö –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô –û–¶–ï–ù–ö–ï 10 –ë–ê–õ–õ–û–í
            target_score = 10.0
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ø—ã—Ç–æ–∫
            improved_text, final_score = await self.claude_validator.iterative_refinement(
                text=text,
                original_prompt=original_prompt,
                analysis_type=analysis_type,
                target_score=target_score,
                max_iterations=7
            )
            
            logger.info("üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: %s/10 –¥–ª—è %s", str(final_score), analysis_type)
            return improved_text
            
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ Claude –≤–∞–ª–∏–¥–∞—Ü–∏–∏: %s", str(e))
            return text  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ



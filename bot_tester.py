#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from bot.handlers.company_handler import CompanyHandler
from bot.handlers.zodiac_handler import ZodiacHandler
from bot.handlers.compatibility_handler import CompatibilityHandler
from bot.handlers.daily_handler import DailyHandler
from bot.handlers.forecast_handler import ForecastHandler
from bot.states import BotState
from datetime import datetime
from utils.logger import setup_logger

logger = setup_logger()

class MockUpdate:
    """–ú–æ–∫ –æ–±—ä–µ–∫—Ç –¥–ª—è Update"""
    def __init__(self, user_id=808868292, text="", callback_data="", username="andrew_bezhan"):
        self.effective_user = MockUser(user_id, username)
        self.message = MockMessage(text) if text else None
        self.callback_query = MockCallbackQuery(callback_data) if callback_data else None

class MockUser:
    """–ú–æ–∫ –æ–±—ä–µ–∫—Ç –¥–ª—è User"""
    def __init__(self, user_id, username="andrew_bezhan"):
        self.id = user_id
        self.username = username
        self.first_name = "Andrew"
        self.last_name = "Bezhan"

class MockMessage:
    """–ú–æ–∫ –æ–±—ä–µ–∫—Ç –¥–ª—è Message"""
    def __init__(self, text):
        self.text = text
    
    async def reply_text(self, text, **kwargs):
        print(f"\nüì± –ë–û–¢ –û–¢–í–ï–ß–ê–ï–¢:")
        print(f"   {text}")
        if kwargs.get('reply_markup'):
            print(f"   üîò –ö–Ω–æ–ø–∫–∏: {kwargs['reply_markup']}")

class MockCallbackQuery:
    """–ú–æ–∫ –æ–±—ä–µ–∫—Ç –¥–ª—è CallbackQuery"""
    def __init__(self, data):
        self.data = data
        self.from_user = MockUser(808868292)
    
    async def edit_message_text(self, text, **kwargs):
        print(f"\nüì± –ë–û–¢ –û–ë–ù–û–í–õ–Ø–ï–¢ –°–û–û–ë–©–ï–ù–ò–ï:")
        print(f"   {text}")
        if kwargs.get('reply_markup'):
            print(f"   üîò –ö–Ω–æ–ø–∫–∏: {kwargs['reply_markup']}")

class MockContext:
    """–ú–æ–∫ –æ–±—ä–µ–∫—Ç –¥–ª—è Context"""
    def __init__(self):
        self.user_data = {}

class BotTester:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞"""
    
    def __init__(self):
        self.company_handler = CompanyHandler()
        self.zodiac_handler = ZodiacHandler()
        self.compatibility_handler = CompatibilityHandler()
        self.daily_handler = DailyHandler()
        self.forecast_handler = ForecastHandler()
        self.context = MockContext()
        self.user_id = 808868292
        
    def print_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–µ—Å—Ç–µ—Ä–∞"""
        print("\n" + "="*60)
        print("ü§ñ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –¢–ï–°–¢–ï–† –ê–°–¢–†–û-–ë–û–¢–ê")
        print("="*60)
        print("1Ô∏è‚É£  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å '–ú–æ–∏ –∫–æ–º–ø–∞–Ω–∏–∏'")
        print("2Ô∏è‚É£  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é' (–ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª)")
        print("3Ô∏è‚É£  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å '–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞'")
        print("4Ô∏è‚É£  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å '–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å'")
        print("5Ô∏è‚É£  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑'")
        print("6Ô∏è‚É£  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å '–ë–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑'")
        print("7Ô∏è‚É£  –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        print("8Ô∏è‚É£  –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        print("0Ô∏è‚É£  –í—ã—Ö–æ–¥")
        print("="*60)
    
    async def test_companies_menu(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é –∫–æ–º–ø–∞–Ω–∏–π"""
        print("\nüß™ –¢–ï–°–¢–ò–†–£–ï–ú: –ú–æ–∏ –∫–æ–º–ø–∞–Ω–∏–∏")
        update = MockUpdate(callback_data="companies")
        await self.company_handler.show_companies_menu(update, self.context)
    
    async def test_add_company_full_cycle(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏"""
        print("\nüß™ –¢–ï–°–¢–ò–†–£–ï–ú: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏")
        
        # –®–∞–≥ 1: –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        print("\n1Ô∏è‚É£ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏...")
        update = MockUpdate(callback_data="add_company")
        await self.company_handler.start_add_company(update, self.context)
        
        # –®–∞–≥ 2: –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è
        company_name = input("\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: ").strip()
        if not company_name:
            company_name = "–û–û–û –¢–µ—Å—Ç–æ–≤–∞—è –ö–æ–º–ø–∞–Ω–∏—è"
            print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {company_name}")
        
        update = MockUpdate(text=company_name)
        await self.company_handler.handle_company_name_input(update, self.context, company_name)
        
        # –®–∞–≥ 3: –í–≤–æ–¥ –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        reg_date = input("\nüìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (YYYY-MM-DD): ").strip()
        if not reg_date:
            reg_date = "2020-05-15"
            print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {reg_date}")
        
        update = MockUpdate(text=reg_date)
        await self.company_handler.handle_registration_date_input(update, self.context, reg_date)
        
        # –®–∞–≥ 4: –í–≤–æ–¥ –º–µ—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        reg_place = input("\nüìç –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ").strip()
        if not reg_place:
            reg_place = "–ú–æ—Å–∫–≤–∞"
            print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {reg_place}")
        
        update = MockUpdate(text=reg_place)
        await self.company_handler.handle_registration_place_input(update, self.context, reg_place)
        
        # –®–∞–≥ 5: –í—ã–±–æ—Ä —Å—Ñ–µ—Ä—ã
        print("\nüè≠ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        print("1 - –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å")
        print("2 - –§–∏–Ω–∞–Ω—Å—ã –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏") 
        print("3 - –¢–æ—Ä–≥–æ–≤–ª—è –∏ —Å—Ñ–µ—Ä–∞ —É—Å–ª—É–≥")
        print("4 - –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ —Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏")
        print("5 - –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ–∫—Ç–æ—Ä")
        print("6 - –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞")
        
        sphere_choice = input("–í—ã–±–æ—Ä (1-6): ").strip()
        sphere_map = {
            "1": "sphere_construction",
            "2": "sphere_finance", 
            "3": "sphere_trade",
            "4": "sphere_tech",
            "5": "sphere_government",
            "6": "sphere_energy"
        }
        
        sphere = sphere_map.get(sphere_choice, "sphere_tech")
        print(f"   –í—ã–±—Ä–∞–Ω–æ: {sphere}")
        
        update = MockUpdate(callback_data=sphere)
        await self.company_handler.handle_sphere_selection(update, self.context, sphere)
        
        # –®–∞–≥ 6: –í–≤–æ–¥ –§–ò–û —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞
        owner_name = input("\nüë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞: ").strip()
        if not owner_name:
            owner_name = "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
            print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {owner_name}")
        
        update = MockUpdate(text=owner_name)
        await self.company_handler.handle_owner_name_input(update, self.context, owner_name)
        
        # –®–∞–≥ 7: –í–≤–æ–¥ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞
        owner_birth = input("\nüìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ (YYYY-MM-DD): ").strip()
        if not owner_birth:
            owner_birth = "1980-05-15"
            print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {owner_birth}")
        
        update = MockUpdate(text=owner_birth)
        await self.company_handler.handle_owner_birth_input(update, self.context, owner_birth)
        
        # –®–∞–≥ 8: –í–≤–æ–¥ –§–ò–û –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
        director_name = input("\nüëî –í–≤–µ–¥–∏—Ç–µ –§–ò–û –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞: ").strip()
        if not director_name:
            director_name = "–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á"
            print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {director_name}")
        
        update = MockUpdate(text=director_name)
        await self.company_handler.handle_director_name_input(update, self.context, director_name)
        
        # –®–∞–≥ 9: –í–≤–æ–¥ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
        director_birth = input("\nüìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ (YYYY-MM-DD): ").strip()
        if not director_birth:
            director_birth = "1975-08-20"
            print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {director_birth}")
        
        update = MockUpdate(text=director_birth)
        await self.company_handler.handle_director_birth_input(update, self.context, director_birth)
        
        print("\n‚úÖ –ü–û–õ–ù–´–ô –¶–ò–ö–õ –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ö–û–ú–ü–ê–ù–ò–ò –ó–ê–í–ï–†–®–ï–ù!")
    
    async def test_zodiac(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞"""
        print("\nüß™ –¢–ï–°–¢–ò–†–£–ï–ú: –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞")
        update = MockUpdate(callback_data="zodiac")
        await self.zodiac_handler.show_zodiac_menu(update, self.context)
    
    async def test_compatibility(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        print("\nüß™ –¢–ï–°–¢–ò–†–£–ï–ú: –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
        update = MockUpdate(callback_data="compatibility")
        await self.compatibility_handler.show_compatibility_menu(update, self.context)
    
    async def test_daily(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        print("\nüß™ –¢–ï–°–¢–ò–†–£–ï–ú: –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑")
        update = MockUpdate(callback_data="daily")
        await self.daily_handler.show_daily_menu(update, self.context)
    
    async def test_forecast(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑–∞"""
        print("\nüß™ –¢–ï–°–¢–ò–†–£–ï–ú: –ë–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑")
        update = MockUpdate(callback_data="forecast")
        await self.forecast_handler.show_forecast_menu(update, self.context)
    
    def show_database(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüß™ –ü–û–ö–ê–ó–´–í–ê–ï–ú: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        from database.connection import get_session
        from sqlalchemy import text
        
        with get_session() as session:
            try:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                result = session.execute(text("SELECT id, telegram_id, username, first_name, last_name FROM users"))
                users = result.fetchall()
                
                print(f"\nüë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ({len(users)}):")
                for user in users:
                    print(f"   ID: {user[0]}, TG: {user[1]}, @{user[2]}, {user[3]} {user[4]}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏
                result = session.execute(text("SELECT id, owner_id, name, registration_date, registration_place, industry, owner_name, director_name FROM companies WHERE is_active = 1"))
                companies = result.fetchall()
                
                print(f"\nüè¢ –ö–û–ú–ü–ê–ù–ò–ò ({len(companies)}):")
                for company in companies:
                    print(f"   ID: {company[0]}, Owner: {company[1]}")
                    print(f"      –ù–∞–∑–≤–∞–Ω–∏–µ: {company[2]}")
                    print(f"      –î–∞—Ç–∞: {company[3]}, –ú–µ—Å—Ç–æ: {company[4]}")
                    print(f"      –û—Ç—Ä–∞—Å–ª—å: {company[5]}")
                    print(f"      –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫: {company[6]}")
                    print(f"      –î–∏—Ä–µ–∫—Ç–æ—Ä: {company[7]}")
                    print()
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def clear_database(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        confirm = input("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –û—á–∏—Å—Ç–∏—Ç—å –í–°–Æ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
        
        if confirm in ['–¥–∞', 'yes', 'y']:
            from database.connection import get_session
            from sqlalchemy import text
            
            with get_session() as session:
                try:
                    # –û—á–∏—â–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏
                    result = session.execute(text("DELETE FROM companies"))
                    companies_deleted = result.rowcount
                    
                    # –û—á–∏—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    result = session.execute(text("DELETE FROM users"))
                    users_deleted = result.rowcount
                    
                    session.commit()
                    
                    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ:")
                    print(f"   üè¢ –ö–æ–º–ø–∞–Ω–∏–π: {companies_deleted}")
                    print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_deleted}")
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                    session.rollback()
        else:
            print("‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–µ—Ä–∞"""
        print("\nüöÄ –ó–ê–ü–£–°–ö –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ì–û –¢–ï–°–¢–ï–†–ê –ê–°–¢–†–û-–ë–û–¢–ê")
        
        while True:
            self.print_menu()
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ").strip()
            
            try:
                if choice == "1":
                    await self.test_companies_menu()
                elif choice == "2":
                    await self.test_add_company_full_cycle()
                elif choice == "3":
                    await self.test_zodiac()
                elif choice == "4":
                    await self.test_compatibility()
                elif choice == "5":
                    await self.test_daily()
                elif choice == "6":
                    await self.test_forecast()
                elif choice == "7":
                    self.show_database()
                elif choice == "8":
                    self.clear_database()
                elif choice == "0":
                    print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ —Ç–µ—Å—Ç–µ—Ä–∞")
                    break
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    
            except Exception as e:
                print(f"\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò: {e}")
                import traceback
                traceback.print_exc()
            
            input("\n‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = BotTester()
    await tester.run()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())


#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üî¨ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç–µ—Å—Ç–µ—Ä –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏—Ö—Å—è —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞
"""

import asyncio
import traceback
from datetime import datetime
from typing import Dict, Any

from bot.handlers.main_router import MainRouter
from bot.handlers.company_handler import CompanyHandler
from bot.states import BotState
from database.connection import get_session
from database.models import User, Company
from utils.logger import setup_logger

logger = setup_logger()

class DetailedMockUpdate:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–∫ Update –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, user_id: int = 12345, message_text: str = "", callback_data: str = ""):
        self.effective_user = DetailedMockUser(user_id)
        self.message = DetailedMockMessage(message_text) if message_text else None
        self.callback_query = DetailedMockCallbackQuery(callback_data) if callback_data else None

class DetailedMockUser:
    """–ü–æ–ª–Ω—ã–π –º–æ–∫ User —Å –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏"""
    
    def __init__(self, user_id: int):
        self.id = user_id
        self.first_name = "TestUser"
        self.last_name = "TestLastName"
        self.username = "test_user"

class DetailedMockMessage:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–æ–∫ Message"""
    
    def __init__(self, text: str):
        self.text = text
        self.replies = []
        self.chat = DetailedMockChat()
        
    async def reply_text(self, text: str, **kwargs):
        reply = {
            'text': text,
            'kwargs': kwargs,
            'timestamp': datetime.now()
        }
        self.replies.append(reply)
        logger.info(f"üì± BOT REPLY: {text[:150]}...")
        return reply

class DetailedMockCallbackQuery:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–æ–∫ CallbackQuery"""
    
    def __init__(self, data: str):
        self.data = data
        self.message = DetailedMockMessage("")
        self.replies = []
    
    async def edit_message_text(self, text: str, **kwargs):
        reply = {
            'text': text,
            'kwargs': kwargs,
            'timestamp': datetime.now()
        }
        self.replies.append(reply)
        logger.info(f"‚úèÔ∏è BOT EDIT: {text[:150]}...")
        return reply
        
    async def answer(self, text: str = "", show_alert: bool = False):
        logger.info(f"üîî BOT CALLBACK ANSWER: {text}")

class DetailedMockChat:
    """–ú–æ–∫ Chat –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã"""
    def __init__(self):
        self.id = 12345

class DetailedMockContext:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–æ–∫ Context"""
    
    def __init__(self):
        self.user_data = {}

class AdvancedBotTester:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç–µ—Å—Ç–µ—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    
    def __init__(self):
        self.router = MainRouter()
        self.company_handler = CompanyHandler()
        self.test_user_id = 888888  # –î—Ä—É–≥–æ–π ID —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å
        logger.info("üî¨ AdvancedBotTester –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def test_companies_flow_detailed(self):
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏—è–º–∏"""
        logger.info("üî¨ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç companies_flow...")
        
        try:
            # 1. –ü–æ–∫–∞–∑ –º–µ–Ω—é –∫–æ–º–ø–∞–Ω–∏–π
            logger.info("üìã –¢–µ—Å—Ç 1: –ü–æ–∫–∞–∑ –º–µ–Ω—é –∫–æ–º–ø–∞–Ω–∏–π")
            update = DetailedMockUpdate(self.test_user_id, callback_data="companies")
            context = DetailedMockContext()
            
            await self.router.callback_handler(update, context)
            
            if update.callback_query.replies:
                logger.info("‚úÖ –ú–µ–Ω—é –∫–æ–º–ø–∞–Ω–∏–π –ø–æ–∫–∞–∑–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error("‚ùå –ú–µ–Ω—é –∫–æ–º–ø–∞–Ω–∏–π –Ω–µ –ø–æ–∫–∞–∑–∞–Ω–æ")
                return False
            
            # 2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
            logger.info("üìã –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏")
            update2 = DetailedMockUpdate(self.test_user_id, callback_data="add_company")
            context2 = DetailedMockContext()
            
            await self.router.callback_handler(update2, context2)
            
            # 3. –í–≤–æ–¥ –∏–º–µ–Ω–∏ –∫–æ–º–ø–∞–Ω–∏–∏ (—Å–∏–º—É–ª—è—Ü–∏—è)
            logger.info("üìã –¢–µ—Å—Ç 3: –í–≤–æ–¥ –∏–º–µ–Ω–∏ –∫–æ–º–ø–∞–Ω–∏–∏")
            update3 = DetailedMockUpdate(self.test_user_id, message_text="–¢–µ—Å—Ç–æ–≤–∞—è IT –ö–æ–º–ø–∞–Ω–∏—è")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.router.state_manager.set_user_state(self.test_user_id, BotState.COMPANY_NAME_INPUT)
            
            await self.router.message_handler(update3, context2)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç companies_flow –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
            logger.error(traceback.format_exc())
            return False
    
    async def test_zodiac_analysis_detailed(self):
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞"""
        logger.info("üî¨ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç zodiac_analysis...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.setup_test_company()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –∑–æ–¥–∏–∞–∫–∞
            update = DetailedMockUpdate(self.test_user_id, callback_data="zodiac")
            context = DetailedMockContext()
            
            await self.router.callback_handler(update, context)
            
            if update.callback_query.replies:
                reply_text = update.callback_query.replies[0]['text']
                if "–ù–ï–¢ –ê–ö–¢–ò–í–ù–û–ô –ö–û–ú–ü–ê–ù–ò–ò" in reply_text:
                    logger.error("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return False
                else:
                    logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–æ–¥–∏–∞–∫–∞ –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç zodiac_analysis –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
            logger.error(traceback.format_exc())
            return False
    
    async def test_compatibility_detailed(self):
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        logger.info("üî¨ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç compatibility...")
        
        try:
            update = DetailedMockUpdate(self.test_user_id, callback_data="compatibility")
            context = DetailedMockContext()
            
            await self.router.callback_handler(update, context)
            
            if update.callback_query.replies:
                logger.info("‚úÖ –ú–µ–Ω—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞–Ω–æ")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç compatibility –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
            logger.error(traceback.format_exc())
            return False
    
    async def test_daily_forecast_detailed(self):
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
        logger.info("üî¨ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç daily_forecast...")
        
        try:
            update = DetailedMockUpdate(self.test_user_id, callback_data="daily")
            context = DetailedMockContext()
            
            await self.router.callback_handler(update, context)
            
            if update.callback_query.replies:
                logger.info("‚úÖ –ú–µ–Ω—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ–∫–∞–∑–∞–Ω–æ")
                return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç daily_forecast –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
            logger.error(traceback.format_exc())
            return False
    
    async def test_settings_detailed(self):
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        logger.info("üî¨ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç settings...")
        
        try:
            update = DetailedMockUpdate(self.test_user_id, callback_data="settings")
            context = DetailedMockContext()
            
            await self.router.callback_handler(update, context)
            
            if update.callback_query.replies:
                reply_text = update.callback_query.replies[0]['text']
                if "—Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ" in reply_text.lower():
                    logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç '—Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ'")
                    return True
                else:
                    logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞–∑–∞–Ω—ã")
                    return True
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç settings –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
            logger.error(traceback.format_exc())
            return False
    
    async def setup_test_company(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é –∏ –¥–µ–ª–∞–µ—Ç –µ–µ –∞–∫—Ç–∏–≤–Ω–æ–π"""
        try:
            with get_session() as session:
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                user = session.query(User).filter_by(telegram_id=self.test_user_id).first()
                if not user:
                    user = User(
                        telegram_id=self.test_user_id,
                        username="advanced_test_user",
                        first_name="AdvancedTest"
                    )
                    session.add(user)
                    session.commit()
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é
                test_company = Company(
                    owner_id=user.id,
                    name="–¢–µ—Å—Ç–æ–≤–∞—è –ö–æ–º–ø–∞–Ω–∏—è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
                    registration_date=datetime(2020, 6, 15),  # –ë–ª–∏–∑–Ω–µ—Ü—ã
                    registration_place="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
                    industry="–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"
                )
                session.add(test_company)
                session.commit()
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é
                user_data = self.router.state_manager.get_user_data(self.test_user_id)
                user_data['active_company_id'] = test_company.id
                self.router.state_manager.set_user_data(self.test_user_id, user_data)
                
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è ID: {test_company.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.test_user_id}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
    
    async def run_detailed_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Å—Ç—ã...")
        
        tests = [
            ("Companies Flow", self.test_companies_flow_detailed),
            ("Zodiac Analysis", self.test_zodiac_analysis_detailed),
            ("Compatibility", self.test_compatibility_detailed),
            ("Daily Forecast", self.test_daily_forecast_detailed),
            ("Settings", self.test_settings_detailed)
        ]
        
        results = []
        
        for test_name, test_func in tests:
            logger.info(f"üß™ –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç: {test_name}")
            try:
                result = await test_func()
                results.append((test_name, result))
                
                if result:
                    logger.info(f"‚úÖ {test_name} - –ü–†–û–®–ï–õ")
                else:
                    logger.error(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
                    
            except Exception as e:
                logger.error(f"üí• {test_name} - –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
                results.append((test_name, False))
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        passed = sum(1 for _, result in results if result)
        total = len(results)
        
        logger.info(f"""
üî¨ –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–†–û–î–í–ò–ù–£–¢–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
{'='*60}
üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}
‚úÖ –ü—Ä–æ—à–ª–æ: {passed}
‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}
üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed/total)*100:.1f}%

üìù –†–ï–ó–£–õ–¨–¢–ê–¢–´:
{chr(10).join([f"{'‚úÖ' if result else '‚ùå'} {name}" for name, result in results])}
        """)
        
        return results

async def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        logger.info("üî¨ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ç–µ—Å—Ç–µ—Ä–∞...")
        
        tester = AdvancedBotTester()
        await tester.run_detailed_tests()
        
        logger.info("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        logger.error(traceback.format_exc())

if __name__ == "__main__":
    asyncio.run(main())
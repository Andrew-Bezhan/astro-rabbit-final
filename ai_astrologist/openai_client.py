# -*- coding: utf-8 -*-
"""
OpenAI API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
–ó–∞–º–µ–Ω–∞ Gemini —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import os
from typing import Dict, Any, Optional, Union
from datetime import datetime
from pytz import UTC
import json

try:
    import openai
    OPENAI_AVAILABLE = True
except ImportError:
    openai = None
    OPENAI_AVAILABLE = False

from utils.config import load_config
from utils.logger import setup_logger

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –∫—Ä–∏—Ç–∏–∫–∏
from ai_astrologist.prompts import (
    ASTRO_RABBIT_SYSTEM_PROMPT,
    COMPANY_ZODIAC_INFO_PROMPT,
    BUSINESS_FORECAST_PROMPT,
    COMPATIBILITY_PROMPT,
    DAILY_FORECAST_PROMPT,
    CRITIC_PROMPT
)

logger = setup_logger()

class OpenAIAstroClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI API"""
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞"""
        self.config = load_config()
        self.client: Optional[Any] = None
        try:
            if not OPENAI_AVAILABLE or not openai:
                raise ImportError("OpenAI SDK –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º OpenAI API –∫–ª–∏–µ–Ω—Ç–∞
            self.client = openai.OpenAI(api_key=self.config.openai.api_key)
            logger.info("üîÆ OpenAI –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI: {e}")
            self.client = None

    def get_birth_chart(self, birth_date: datetime, latitude: float, longitude: float) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ OpenAI

        Args:
            birth_date (datetime): –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/—Ä–æ–∂–¥–µ–Ω–∏—è
            latitude (float): –®–∏—Ä–æ—Ç–∞ –º–µ—Å—Ç–∞
            longitude (float): –î–æ–ª–≥–æ—Ç–∞ –º–µ—Å—Ç–∞

        Returns:
            Dict[str, Any]: –î–∞–Ω–Ω—ã–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã (JSON-–ø–æ–ª—è)
        """
        if not OPENAI_AVAILABLE or not self.config.openai.api_key or not self.client:
            logger.warning("‚ö†Ô∏è OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –∫–∞—Ä—Ç—É")
            return self._get_fallback_chart(birth_date, latitude, longitude)
        try:
            prompt = f"""
            –°–æ–∑–¥–∞–π –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è:
            –î–∞—Ç–∞: {birth_date.strftime('%Y-%m-%d %H:%M')}
            –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {latitude}, {longitude}
            
            –í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏:
            - sun_sign: –∑–Ω–∞–∫ —Å–æ–ª–Ω—Ü–∞
            - moon_sign: –∑–Ω–∞–∫ –ª—É–Ω—ã  
            - rising_sign: –≤–æ—Å—Ö–æ–¥—è—â–∏–π –∑–Ω–∞–∫
            - planets: –ø–æ–∑–∏—Ü–∏–∏ –ø–ª–∞–Ω–µ—Ç
            - houses: –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–æ–º–∞
            - aspects: –∞—Å–ø–µ–∫—Ç—ã –º–µ–∂–¥—É –ø–ª–∞–Ω–µ—Ç–∞–º–∏
            
            –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
            """
            response = self.client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.3,
                max_tokens=2000
            )
            content = response.choices[0].message.content.strip()
            try:
                chart_data = json.loads(content)
                logger.info("‚úÖ –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ OpenAI")
                return chart_data
            except json.JSONDecodeError:
                logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç OpenAI")
                return self._get_fallback_chart(birth_date, latitude, longitude)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ OpenAI: {e}")
            return self._get_fallback_chart(birth_date, latitude, longitude)

    def _get_fallback_chart(self, birth_date: datetime, latitude: float, longitude: float) -> Dict[str, Any]:
        """–ë–∞–∑–æ–≤–∞—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OpenAI API"""
        from utils.helpers import get_zodiac_sign
        sun_sign = get_zodiac_sign(birth_date.month, birth_date.day)
        return {
            "sun_sign": sun_sign,
            "moon_sign": sun_sign,  # –£–ø—Ä–æ—â–µ–Ω–∏–µ ‚Äì –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ API –±–µ—Ä—ë–º –∑–Ω–∞–∫ —Å–æ–ª–Ω—Ü–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
            "rising_sign": sun_sign,
            "birth_date": birth_date.isoformat(),
            "coordinates": {"latitude": latitude, "longitude": longitude},
            "planets": {
                "sun": {"sign": sun_sign, "degree": 15},
                "moon": {"sign": sun_sign, "degree": 10},
                "mercury": {"sign": sun_sign, "degree": 20},
                "venus": {"sign": sun_sign, "degree": 25},
                "mars": {"sign": sun_sign, "degree": 5}
            },
            "houses": {f"house_{i}": sun_sign for i in range(1, 13)},
            "aspects": []
        }

    async def generate_horoscope(self, prompt: str, max_tokens: int = 1500) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–µ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ —á–µ—Ä–µ–∑ OpenAI

        Args:
            prompt (str): –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            max_tokens (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤

        Returns:
            str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø (–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
        """
        if not OPENAI_AVAILABLE or not self.config.openai.api_key or not self.client:
            logger.warning("‚ö†Ô∏è OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        try:
            response = self.client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥ AstroRabbit. –°–æ–∑–¥–∞—ë—à—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=max_tokens
            )
            content = response.choices[0].message.content
            if content:
                logger.info("‚úÖ –ì–æ—Ä–æ—Å–∫–æ–ø —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ OpenAI")
                return content.strip()
            else:
                logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI")
                return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ —á–µ—Ä–µ–∑ OpenAI: {e}")
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"

    async def analyze_compatibility(self, person1_data: Dict[str, Any], person2_data: Dict[str, Any]) -> str:
        """
        –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–≤—É—Ö –ª—é–¥–µ–π —á–µ—Ä–µ–∑ OpenAI

        Args:
            person1_data (Dict): –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ (–≤–∫–ª—é—á–∞—è sun_sign)
            person2_data (Dict): –î–∞–Ω–Ω—ã–µ –≤—Ç–æ—Ä–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ (–≤–∫–ª—é—á–∞—è sun_sign)

        Returns:
            str: –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
        """
        if not OPENAI_AVAILABLE or not self.config.openai.api_key or not self.client:
            return "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        try:
            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:

            –ß–µ–ª–æ–≤–µ–∫ 1: {person1_data.get('sun_sign', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
            –ß–µ–ª–æ–≤–µ–∫ 2: {person2_data.get('sun_sign', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

            –î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —ç—Ç–∏—Ö –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞.
            """
            response = self.client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏. –î–∞—ë—à—å —Ç–æ—á–Ω—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –æ—Ç–Ω–æ—à–µ–Ω–∏–π."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.6,
                max_tokens=1000
            )
            content = response.choices[0].message.content
            if content:
                return content.strip()
            else:
                return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å."
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ OpenAI: {e}")
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"

    def generate_astro_analysis(self, chart_data: Dict[str, Any], analysis_type: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ OpenAI (—Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ—Ñ–∏–ª—é –∞–Ω–∞–ª–∏–∑–∞).

        Args:
            chart_data (Dict): –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏/–æ–±—ä–µ–∫—Ç–∞, –Ω–æ–≤–æ—Å—Ç–∏, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã)
            analysis_type (str): –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "zodiac_info", "business_forecast", "compatibility", "daily_forecast")

        Returns:
            str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ (–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
        """
        if not OPENAI_AVAILABLE or not self.config.openai.api_key or not self.client:
            return "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)"
        try:
            # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
            def safe_date(value: Any) -> str:
                if not value:
                    return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                if isinstance(value, datetime):
                    return value.strftime('%d.%m.%Y')
                try:
                    dt = datetime.fromisoformat(str(value))
                    return dt.strftime('%d.%m.%Y')
                except Exception:
                    return str(value)

            # –§–æ—Ä–º–∏—Ä—É–µ–º system- –∏ user-–ø—Ä–æ–º–ø—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
            system_msg = {"role": "system", "content": ASTRO_RABBIT_SYSTEM_PROMPT.strip()}
            user_msg = {"role": "user", "content": ""}

            if analysis_type in ["zodiac", "zodiac_info"]:
                data = chart_data
                comp = data.get("company_data", {})
                prompt_text = COMPANY_ZODIAC_INFO_PROMPT.format(
                    company_name=comp.get('name', ''),
                    registration_date=safe_date(comp.get('registration_date')),
                    registration_place=comp.get('registration_place', ''),
                    zodiac_sign=data.get('zodiac_sign', '')
                )
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if data.get('astro_info'):
                    prompt_text += data['astro_info']
                # –ï—Å–ª–∏ –≤ —à–∞–±–ª–æ–Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–∞ –≤—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π, –∑–∞–º–µ–Ω–∏–º –µ—ë
                if "{news_data}" in prompt_text:
                    prompt_text = prompt_text.replace("{news_data}", str(data.get('news_data', '')))
                user_msg['content'] = prompt_text

            elif analysis_type in ["business_forecast", "business", "forecast"]:
                data = chart_data
                comp = data.get("company_data", {})
                prompt_text = BUSINESS_FORECAST_PROMPT.format(
                    company_name=comp.get('name', ''),
                    registration_date=safe_date(comp.get('registration_date')),
                    registration_place=comp.get('registration_place', ''),
                    business_sphere=comp.get('business_sphere', ''),
                    company_zodiac=data.get('company_zodiac', ''),
                    owner_name=comp.get('owner_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                    owner_birth_date=safe_date(comp.get('owner_birth_date')),
                    owner_zodiac=data.get('owner_zodiac', ''),
                    owner_numerology=data.get('owner_numerology', 0),
                    director_name=comp.get('director_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                    director_birth_date=safe_date(comp.get('director_birth_date')),
                    director_zodiac=data.get('director_zodiac', ''),
                    director_numerology=data.get('director_numerology', 0),
                    astrology_data=str(data.get('astrology_data', ''))[:1500],
                    news_data=str(data.get('news_data', ''))[:1500]
                )
                user_msg['content'] = prompt_text

            elif analysis_type == "compatibility":
                data = chart_data
                comp = data.get("company_data", {})
                obj = data.get("object_data", {})
                prompt_text = COMPATIBILITY_PROMPT.format(
                    company_name=comp.get('name', ''),
                    company_zodiac=data.get('company_zodiac', ''),
                    business_sphere=comp.get('business_sphere', ''),
                    object_type=data.get('object_type', ''),
                    object_name=obj.get('name', ''),
                    object_birth_date=safe_date(obj.get('birth_date')),
                    object_birth_place=obj.get('birth_place', ''),
                    object_zodiac=data.get('object_zodiac', ''),
                    object_numerology=data.get('object_numerology', 0)
                )
                user_msg['content'] = prompt_text

            elif analysis_type in ["daily_forecast", "daily"]:
                data = chart_data
                comp = data.get("company_data", {})
                prompt_text = DAILY_FORECAST_PROMPT.format(
                    company_name=comp.get('name', ''),
                    company_zodiac=data.get('company_zodiac', ''),
                    business_sphere=comp.get('business_sphere', ''),
                    owner_zodiac=data.get('owner_zodiac', ''),
                    director_zodiac=data.get('director_zodiac', ''),
                    daily_astrology=str(data.get('daily_astrology', ''))[:1000],
                    today_news=str(data.get('today_news', ''))[:1500]
                )
                user_msg['content'] = prompt_text

            else:
                # –û–±—â–∏–π —Å–ª—É—á–∞–π –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
                base_prompt = "–°–¥–µ–ª–∞–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"
                prompt_text = f"{base_prompt} –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:\n{json.dumps(chart_data, ensure_ascii=False, indent=2)}"
                user_msg['content'] = prompt_text

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ OpenAI
            response = self.client.chat.completions.create(
                model="gpt-4",
                messages=[system_msg, user_msg],
                temperature=0.7,
                max_tokens=2000
            )
            content = response.choices[0].message.content
            if content:
                logger.info(f"‚úÖ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ OpenAI ({analysis_type})")
                return content.strip()
            else:
                logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI")
                return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ OpenAI: {e}")
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"

    def criticize_answer(self, profile_name: str, answer_text: str, scoring_profile: Dict[str, Any]) -> Dict[str, Union[float, str]]:
        """
        –ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏-–∫—Ä–∏—Ç–∏–∫—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.

        Args:
            profile_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è (—Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞), –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫—Ä–∏—Ç–∏–∫–∞
            answer_text (str): –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–≤–∫–ª—é—á–∞—è SELF-SCORE –≤ –∫–æ–Ω—Ü–µ)
            scoring_profile (Dict): –ü—Ä–æ—Ñ–∏–ª—å –º–µ—Ç—Ä–∏–∫ (–Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞)

        Returns:
            Dict: {'score': –∏—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ (float –∏–ª–∏ None), 'comment': –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (str)}
        """
        if not OPENAI_AVAILABLE or not self.config.openai.api_key or not self.client:
            return {"score": None, "comment": "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
        try:
            # –í—ã–¥–µ–ª—è–µ–º —á–∞—Å—Ç—å —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (SELF-SCORE), –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            self_score_part = "–Ω–µ —É–∫–∞–∑–∞–Ω"
            main_answer = answer_text
            if "SELF-SCORE:" in answer_text:
                idx = answer_text.find("SELF-SCORE:")
                main_answer = answer_text[:idx].strip()
                self_score_part = answer_text[idx:].strip()
            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–≤–æ–¥ –¥–ª—è –∫—Ä–∏—Ç–∏–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —à–∞–±–ª–æ–Ω—É CRITIC_PROMPT
            critic_input = (f"1) –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å/—Ç–∏–ø –æ–ø—Ü–∏–∏: {profile_name}\n"
                            f"2) –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:\n{main_answer}\n"
                            f"3) –∫–æ–Ω—Ñ–∏–≥ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤: (–ø—Ä–æ—Ñ–∏–ª—å '{profile_name}')\n"
                            f"4) Self-score –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {self_score_part}")
            critic_prompt = CRITIC_PROMPT + "\n" + critic_input
            response = self.client.chat.completions.create(
                model="gpt-4",
                messages=[{"role": "user", "content": critic_prompt}],
                temperature=0.0,
                max_tokens=500
            )
            critique = response.choices[0].message.content.strip()
            # –ü–∞—Ä—Å–∏–º –æ—Ü–µ–Ω–∫—É –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ –æ—Ç–≤–µ—Ç–∞ –∫—Ä–∏—Ç–∏–∫–∞
            critic_score = None
            critic_comment = ""
            for line in critique.splitlines():
                line = line.strip()
                if line.upper().startswith("TARGET-SCORE"):
                    # –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: "TARGET-SCORE: X.Y/10"
                    try:
                        critic_score = float(line.split(":", 1)[1].split("/")[0].strip())
                    except Exception:
                        critic_score = None
                if line.upper().startswith("–ö–û–ú–ú–ï–ù–¢–ê–†") or line.upper().startswith("COMMENT"):
                    parts = line.split(":", 1)
                    if len(parts) > 1:
                        critic_comment = parts[1].strip()
            return {"score": critic_score, "comment": critic_comment}
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫—Ä–∏—Ç–∏–∫–æ–º: {e}")
            return {"score": None, "comment": f"–û—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏–∫–∞: {e}"}

    def get_model_info(self) -> Dict[str, Any]:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ OpenAI"""
        return {
            "provider": "OpenAI",
            "model": "gpt-4",
            "available": OPENAI_AVAILABLE and bool(self.client),
            "features": ["text_generation", "json_mode", "function_calling"]
        }

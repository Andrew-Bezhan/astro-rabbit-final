"""
OpenAI API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
–ó–∞–º–µ–Ω–∞ Gemini —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import os
from typing import Dict, Any, Optional, Union
from datetime import datetime
import json

try:
    import openai
    OPENAI_AVAILABLE = True
except ImportError:
    openai = None
    OPENAI_AVAILABLE = False

from utils.config import load_config
from utils.logger import setup_logger

logger = setup_logger()


class OpenAIAstroClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI API"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞"""
        self.config = load_config()
        self.client: Optional[Any] = None
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenAI
            if not OPENAI_AVAILABLE or not openai:
                raise ImportError("OpenAI SDK –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º OpenAI API
            self.client = openai.OpenAI(api_key=self.config.openai.api_key)
            logger.info("üîÆ OpenAI –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI: {e}")
            self.client = None
    
    def get_birth_chart(self, birth_date: datetime, latitude: float, longitude: float) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ OpenAI
        
        Args:
            birth_date (datetime): –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
            latitude (float): –®–∏—Ä–æ—Ç–∞ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
            longitude (float): –î–æ–ª–≥–æ—Ç–∞ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
            
        Returns:
            Dict[str, Any]: –î–∞–Ω–Ω—ã–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
        """
        if not OPENAI_AVAILABLE or not self.config.openai.api_key or not self.client:
            logger.warning("‚ö†Ô∏è OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –∫–∞—Ä—Ç—É")
            return self._get_fallback_chart(birth_date, latitude, longitude)
        
        try:
            prompt = f"""
            –°–æ–∑–¥–∞–π –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è:
            –î–∞—Ç–∞: {birth_date.strftime('%Y-%m-%d %H:%M')}
            –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {latitude}, {longitude}
            
            –í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏:
            - sun_sign: –∑–Ω–∞–∫ —Å–æ–ª–Ω—Ü–∞
            - moon_sign: –∑–Ω–∞–∫ –ª—É–Ω—ã  
            - rising_sign: –≤–æ—Å—Ö–æ–¥—è—â–∏–π –∑–Ω–∞–∫
            - planets: –ø–æ–∑–∏—Ü–∏–∏ –ø–ª–∞–Ω–µ—Ç
            - houses: –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–æ–º–∞
            - aspects: –∞—Å–ø–µ–∫—Ç—ã –º–µ–∂–¥—É –ø–ª–∞–Ω–µ—Ç–∞–º–∏
            
            –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
            """
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
            response = self.client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.3,
                max_tokens=2000
            )
            
            content = response.choices[0].message.content.strip()
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            try:
                chart_data = json.loads(content)
                logger.info("‚úÖ –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ OpenAI")
                return chart_data
            except json.JSONDecodeError:
                logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç OpenAI")
                return self._get_fallback_chart(birth_date, latitude, longitude)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ OpenAI: {e}")
            return self._get_fallback_chart(birth_date, latitude, longitude)
    
    def _get_fallback_chart(self, birth_date: datetime, latitude: float, longitude: float) -> Dict[str, Any]:
        """–ë–∞–∑–æ–≤–∞—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
        from utils.helpers import get_zodiac_sign
        
        sun_sign = get_zodiac_sign(birth_date.month, birth_date.day)
        
        return {
            "sun_sign": sun_sign,
            "moon_sign": sun_sign,  # –£–ø—Ä–æ—â–µ–Ω–∏–µ
            "rising_sign": sun_sign,  # –£–ø—Ä–æ—â–µ–Ω–∏–µ
            "birth_date": birth_date.isoformat(),
            "coordinates": {"latitude": latitude, "longitude": longitude},
            "planets": {
                "sun": {"sign": sun_sign, "degree": 15},
                "moon": {"sign": sun_sign, "degree": 10},
                "mercury": {"sign": sun_sign, "degree": 20},
                "venus": {"sign": sun_sign, "degree": 25},
                "mars": {"sign": sun_sign, "degree": 5}
            },
            "houses": {f"house_{i}": sun_sign for i in range(1, 13)},
            "aspects": []
        }
    
    async def generate_horoscope(self, prompt: str, max_tokens: int = 1500) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞ —á–µ—Ä–µ–∑ OpenAI
        
        Args:
            prompt (str): –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            max_tokens (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            
        Returns:
            str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø
        """
        if not OPENAI_AVAILABLE or not self.config.openai.api_key or not self.client:
            logger.warning("‚ö†Ô∏è OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥ AstroRabbit. –°–æ–∑–¥–∞–≤–∞–µ—à—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=max_tokens
            )
            
            content = response.choices[0].message.content
            if content:
                logger.info("‚úÖ –ì–æ—Ä–æ—Å–∫–æ–ø —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ OpenAI")
                return content.strip()
            else:
                logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI")
                return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ —á–µ—Ä–µ–∑ OpenAI: {e}")
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"
    
    async def analyze_compatibility(self, person1_data: Dict[str, Any], 
                                  person2_data: Dict[str, Any]) -> str:
        """
        –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ OpenAI
        
        Args:
            person1_data (Dict): –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
            person2_data (Dict): –î–∞–Ω–Ω—ã–µ –≤—Ç–æ—Ä–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
            
        Returns:
            str: –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        """
        if not OPENAI_AVAILABLE or not self.config.openai.api_key or not self.client:
            return "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        
        try:
            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:
            
            –ß–µ–ª–æ–≤–µ–∫ 1: {person1_data.get('sun_sign', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
            –ß–µ–ª–æ–≤–µ–∫ 2: {person2_data.get('sun_sign', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
            
            –î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —ç—Ç–∏—Ö –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞.
            """
            
            response = self.client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏. –î–∞–µ—à—å —Ç–æ—á–Ω—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –æ—Ç–Ω–æ—à–µ–Ω–∏–π."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.6,
                max_tokens=1000
            )
            
            content = response.choices[0].message.content
            if content:
                return content.strip()
            else:
                return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å."
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ OpenAI: {e}")
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"
    
    def generate_astro_analysis(self, chart_data: Dict[str, Any], analysis_type: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ OpenAI
        
        Args:
            chart_data (Dict): –î–∞–Ω–Ω—ã–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
            analysis_type (str): –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            str: –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        """
        if not OPENAI_AVAILABLE or not self.config.openai.api_key or not self.client:
            return "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)"
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞
            analysis_prompts = {
                "personality": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ª–∏—á–Ω–æ—Å—Ç—å –ø–æ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ",
                "business": "–î–∞–π –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö", 
                "compatibility": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å",
                "daily": "–°–æ–∑–¥–∞–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑",
                "detailed": "–°–¥–µ–ª–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"
            }
            
            base_prompt = analysis_prompts.get(analysis_type, "–°–¥–µ–ª–∞–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")
            
            import json
            prompt = f"""
            {base_prompt} –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:
            
            {json.dumps(chart_data, ensure_ascii=False, indent=2)}
            
            –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø TELEGRAM:
            - –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π HTML-—Ç–µ–≥–∏: <p>, <h1>, <h2>, <h3>, <h4>, <b>, <i>, <ul>, <li>, <hr>, <div>
            - –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown: **, __, ##, ###, ---
            - –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏
            - –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ñ–æ—Ä–º–ª—è–π: "üåü –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞"
            - –°–ø–∏—Å–∫–∏ –æ—Ñ–æ—Ä–º–ª—è–π: "‚Ä¢ –ü—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞"
            - –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –¥–æ–±–∞–≤–ª—è–π –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
            
            –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –≠–ú–û–î–ó–ò:
            - üåü –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
            - ‚≠ê –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            - üíº –¥–ª—è –±–∏–∑–Ω–µ—Å-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            - ‚ö° –¥–ª—è —ç–Ω–µ—Ä–≥–∏—á–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤
            - üöÄ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Ä–∞–∑–≤–∏—Ç–∏—è
            - ‚ö†Ô∏è –¥–ª—è —Ä–∏—Å–∫–æ–≤ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            - üíé –¥–ª—è —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω
            - üîÆ –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            - üìà –¥–ª—è —Ä–æ—Å—Ç–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            - ü§ù –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
            - üéØ –¥–ª—è —Ü–µ–ª–µ–π –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            - üí° –¥–ª—è –∏–Ω—Å–∞–π—Ç–æ–≤ –∏ –∏–¥–µ–π
            - üî¢ –¥–ª—è –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
            - üåç –¥–ª—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
            - ‚ú® –¥–ª—è –∑–∞–∫–ª—é—á–µ–Ω–∏–π –∏ –∏—Ç–æ–≥–æ–≤
            
            –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
            """
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
            response = self.client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥ AstroRabbit. –°–æ–∑–¥–∞–≤–∞–µ—à—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞–Ω–∞–ª–∏–∑—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É—è –ø—Ä–∞–≤–∏–ª–∞–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Telegram."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=2000
            )
            
            content = response.choices[0].message.content
            if content:
                logger.info(f"‚úÖ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ OpenAI ({analysis_type})")
                return content.strip()
            else:
                logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI")
                return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ OpenAI: {e}")
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"

    def get_model_info(self) -> Dict[str, Any]:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"""
        return {
            "provider": "OpenAI",
            "model": "gpt-4",
            "available": OPENAI_AVAILABLE and bool(self.client),
            "features": ["text_generation", "json_mode", "function_calling"]
        }

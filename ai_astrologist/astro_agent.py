# -*- coding: utf-8 -*-
"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å AI-–∞—Å—Ç—Ä–æ–ª–æ–≥–∞ AstroRabbit
"""

from typing import Dict, Any, Optional, List
from datetime import datetime

from ai_astrologist.numerology import NumerologyCalculator
from astrology_api.astro_calculations import AstroCalculations
from utils.config import load_config
from utils.helpers import get_zodiac_sign
from utils.logger import setup_logger

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ—Ñ–∏–ª–µ–π –∏ —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –∏–∑ scoring.yaml
from validation_agent import load_scoring_profile, compute_score

logger = setup_logger()

class AstroAgent:
    """AI-–∞–≥–µ–Ω—Ç (–∞—Å—Ç—Ä–æ–ª–æ–≥) AstroRabbit"""
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ AstroRabbit"""
        self.config = load_config()
        try:
            from ai_astrologist.openai_client import OpenAIAstroClient
            self.openai_client = OpenAIAstroClient()
            self.numerology = NumerologyCalculator()
            self.astro_calculations = AstroCalculations()
            logger.info("‚úÖ AstroRabbit —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (OpenAI –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω)")
        except Exception as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å AI-–∞—Å—Ç—Ä–æ–ª–æ–≥–∞: {e}")
            raise Exception(f"OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {e}")

    async def analyze_company_zodiac(self, company_info: Dict[str, Any], news_data: str = "") -> str:
        """
        –ê–Ω–∞–ª–∏–∑ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ (–∫—Ä–∞—Ç–∫–∏–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å).

        Args:
            company_info (Dict): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ (–Ω–∞–∑–≤–∞–Ω–∏–µ, –¥–∞—Ç–∞/–º–µ—Å—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Ç.–¥.)
            news_data (str): –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä)

        Returns:
            str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏
        """
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –æ–±—ä–µ–∫—Ç datetime
            registration_date = company_info.get('registration_date')
            if isinstance(registration_date, str):
                date_obj = None
                for fmt in ('%Y-%m-%d', '%d.%m.%Y', '%d/%m/%Y', '%Y-%m-%dT%H:%M:%S'):
                    try:
                        date_obj = datetime.strptime(registration_date, fmt)
                        break
                    except ValueError:
                        continue
                if date_obj is None:
                    try:
                        date_obj = datetime.fromisoformat(registration_date)
                    except Exception:
                        date_obj = None
                registration_date = date_obj or datetime(2020, 1, 1)

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –∫–æ–º–ø–∞–Ω–∏–∏ (–ø–æ–¥—Ä–æ–±–Ω—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ) –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            natal_chart = {}
            if self.astro_calculations and registration_date:
                natal_chart = await self.astro_calculations.get_company_natal_chart(
                    company_info.get('name', ''),
                    registration_date,
                    company_info.get('registration_place', '')
                )

            zodiac_sign = get_zodiac_sign(registration_date) if registration_date else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–∞—Å–ø–µ–∫—Ç—ã, —ç–ª–µ–º–µ–Ω—Ç—ã) –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
            astro_info = ""
            if natal_chart:
                basic_info = natal_chart.get('basic_info', {})
                interpretation = natal_chart.get('interpretation', {})
                astro_info = (
                    "\n–î–µ—Ç–∞–ª—å–Ω–∞—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
                    f"‚Ä¢ –≠–ª–µ–º–µ–Ω—Ç: {basic_info.get('element', '')}\n"
                    f"‚Ä¢ –£–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {basic_info.get('ruler', '')}\n"
                    f"‚Ä¢ –ë–∏–∑–Ω–µ—Å-—Å—Ç–∏–ª—å: {interpretation.get('business_style', '')}\n"
                    f"‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã: {interpretation.get('financial_outlook', '')}\n"
                    f"‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞: {interpretation.get('growth_potential', '')}\n"
                    f"‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å—Ñ–µ—Ä—ã: {', '.join(basic_info.get('best_spheres', []))}\n"
                )

            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
            chart_data = {
                "company_data": company_info,
                "zodiac_sign": zodiac_sign,
                "astro_info": astro_info,
                "news_data": news_data[:2000] if news_data else ""
            }

            if not self.openai_client:
                raise Exception("OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é LLM
            result = self.openai_client.generate_astro_analysis(chart_data, "zodiac_info")
            logger.info(f"‚ú® –ó–∞–≤–µ—Ä—à—ë–Ω –∞–Ω–∞–ª–∏–∑ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ \"{company_info.get('name', '')}\"")

            if result:
                # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º—É –º–µ—Ç—Ä–∏–∫ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                try:
                    profile = load_scoring_profile("zodiac_info")
                    local_score = compute_score(result, profile)
                    critic_feedback = self.openai_client.criticize_answer("zodiac_info", result, profile)
                    logger.info(
                        f"üìä –õ–æ–∫–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {local_score['score']}/10 ‚Äî "
                        f"–û—Ü–µ–Ω–∫–∞ –∫—Ä–∏—Ç–∏–∫–∞: {critic_feedback.get('score', 'N/A')}/10, "
                        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫—Ä–∏—Ç–∏–∫–∞: {critic_feedback.get('comment', '')}"
                    )
                except Exception as me:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è zodiac_info: {me}")
                return result
            else:
                return "üîÆ –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ–ª—É—á–µ–Ω—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –¥–ª—è –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏."
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
            raise Exception(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞: {e}")

    async def generate_business_forecast(self, company_data: Dict[str, Any], astrology_data: str = "", news_data: str = "") -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏.

        Args:
            company_data (Dict): –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
            astrology_data (str): –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã)
            news_data (str): –°–≤–æ–¥–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç—Ä–∞—Å–ª–∏

        Returns:
            str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç
            company_zodiac = self._get_zodiac_safe(company_data.get('registration_date'))
            owner_zodiac = self._get_zodiac_safe(company_data.get('owner_birth_date'))
            director_zodiac = self._get_zodiac_safe(company_data.get('director_birth_date'))

            # –í—ã—á–∏—Å–ª—è–µ–º –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏
            owner_numerology = 0
            director_numerology = 0
            if company_data.get('owner_name'):
                owner_numerology = self.numerology.calculate_name_number(company_data['owner_name'])
            if company_data.get('director_name'):
                director_numerology = self.numerology.calculate_name_number(company_data['director_name'])

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è LLM
            chart_data = {
                "company_data": company_data,
                "company_zodiac": company_zodiac,
                "owner_zodiac": owner_zodiac,
                "director_zodiac": director_zodiac,
                "owner_numerology": owner_numerology,
                "director_numerology": director_numerology,
                "astrology_data": astrology_data,
                "news_data": news_data[:2000] if news_data else ""
            }

            if not self.openai_client:
                raise Exception("OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            result = self.openai_client.generate_astro_analysis(chart_data, "business_forecast")
            logger.info(f"üìä –ë–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è \"{company_data.get('name', '')}\" —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")

            if result:
                try:
                    profile = load_scoring_profile("business_forecast")
                    local_score = compute_score(result, profile)
                    critic_feedback = self.openai_client.criticize_answer("business_forecast", result, profile)
                    logger.info(
                        f"üìä –õ–æ–∫–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {local_score['score']}/10 ‚Äî "
                        f"–û—Ü–µ–Ω–∫–∞ –∫—Ä–∏—Ç–∏–∫–∞: {critic_feedback.get('score', 'N/A')}/10, "
                        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫—Ä–∏—Ç–∏–∫–∞: {critic_feedback.get('comment', '')}"
                    )
                except Exception as me:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è business_forecast: {me}")
                return result
            else:
                return "üìä –ë–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑ –≥–æ—Ç–æ–≤. –ü–æ–ª—É—á–µ–Ω—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∫–æ–º–ø–∞–Ω–∏–∏."
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            raise Exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")

    async def analyze_compatibility(self, company_data: Dict[str, Any], object_data: Dict[str, Any], object_type: str) -> str:
        """
        –ê–Ω–∞–ª–∏–∑ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º.

        Args:
            company_data (Dict): –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
            object_data (Dict): –î–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞ (—á–µ–ª–æ–≤–µ–∫–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏)
            object_type (str): –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ ("—Å–æ—Ç—Ä—É–¥–Ω–∏–∫", "–∫–ª–∏–µ–Ω—Ç" –∏–ª–∏ "–ø–∞—Ä—Ç–Ω–µ—Ä")

        Returns:
            str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        """
        try:
            # –ó–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –æ–±—ä–µ–∫—Ç–∞
            company_zodiac = self._get_zodiac_safe(company_data.get('registration_date'))
            object_zodiac = self._get_zodiac_safe(object_data.get('birth_date'))

            # –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ –∏–º–µ–Ω–∏ –æ–±—ä–µ–∫—Ç–∞
            object_numerology = 0
            if object_data.get('name'):
                object_numerology = self.numerology.calculate_name_number(object_data['name'])

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            chart_data = {
                "company_data": company_data,
                "object_data": object_data,
                "object_type": object_type,
                "company_zodiac": company_zodiac,
                "object_zodiac": object_zodiac,
                "object_numerology": object_numerology
            }

            if not self.openai_client:
                raise Exception("OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            result = self.openai_client.generate_astro_analysis(chart_data, "compatibility")
            logger.info(f"ü§ù –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ ({object_type}) –≤—ã–ø–æ–ª–Ω–µ–Ω")

            if result:
                try:
                    profile = load_scoring_profile("compatibility")
                    local_score = compute_score(result, profile)
                    critic_feedback = self.openai_client.criticize_answer("compatibility", result, profile)
                    logger.info(
                        f"ü§ù –õ–æ–∫–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {local_score['score']}/10 ‚Äî "
                        f"–û—Ü–µ–Ω–∫–∞ –∫—Ä–∏—Ç–∏–∫–∞: {critic_feedback.get('score', 'N/A')}/10, "
                        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫—Ä–∏—Ç–∏–∫–∞: {critic_feedback.get('comment', '')}"
                    )
                except Exception as me:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è compatibility: {me}")
                return result
            else:
                return "ü§ù –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤—É."
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
            raise Exception(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")

    async def generate_daily_forecast(self, company_data: Dict[str, Any], daily_astrology: str = "", today_news: str = "") -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏.

        Args:
            company_data (Dict): –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
            daily_astrology (str): –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤–ª–∏—è–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
            today_news (str): –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è

        Returns:
            str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞ (–∫–æ–º–ø–∞–Ω–∏–∏, –≤–ª–∞–¥–µ–ª—å—Ü–∞, –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞)
            company_zodiac = self._get_zodiac_safe(company_data.get('registration_date'))
            owner_zodiac = self._get_zodiac_safe(company_data.get('owner_birth_date'))
            director_zodiac = self._get_zodiac_safe(company_data.get('director_birth_date'))

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞
            chart_data = {
                "company_data": company_data,
                "company_zodiac": company_zodiac,
                "owner_zodiac": owner_zodiac,
                "director_zodiac": director_zodiac,
                "daily_astrology": daily_astrology,
                "today_news": today_news[:1500] if today_news else ""
            }

            if not self.openai_client:
                raise Exception("OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            result = self.openai_client.generate_astro_analysis(chart_data, "daily_forecast")
            logger.info(f"üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ \"{company_data.get('name', '')}\" –≤—ã–ø–æ–ª–Ω–µ–Ω")

            if result:
                try:
                    profile = load_scoring_profile("daily_forecast")
                    local_score = compute_score(result, profile)
                    critic_feedback = self.openai_client.criticize_answer("daily_forecast", result, profile)
                    logger.info(
                        f"üìÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {local_score['score']}/10 ‚Äî "
                        f"–û—Ü–µ–Ω–∫–∞ –∫—Ä–∏—Ç–∏–∫–∞: {critic_feedback.get('score', 'N/A')}/10, "
                        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫—Ä–∏—Ç–∏–∫–∞: {critic_feedback.get('comment', '')}"
                    )
                except Exception as me:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è daily_forecast: {me}")
                return result
            else:
                return "üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –≥–æ—Ç–æ–≤. –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å."
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            raise Exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")

    def _get_zodiac_safe(self, date_value: Any) -> str:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –¥–∞—Ç—ã.

        Args:
            date_value (Any): –î–∞—Ç–∞ (datetime –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞)

        Returns:
            str: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –∏–ª–∏ "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        """
        try:
            if not date_value:
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if isinstance(date_value, str):
                # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–æ–≤—É—é –¥–∞—Ç—É –≤ datetime, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                for fmt in ('%Y-%m-%d', '%d.%m.%Y', '%d/%m/%Y', '%Y-%m-%dT%H:%M:%S'):
                    try:
                        date_value = datetime.strptime(date_value, fmt)
                        break
                    except ValueError:
                        continue
                if isinstance(date_value, str):
                    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            # –¢–µ–ø–µ—Ä—å date_value –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ datetime
            return get_zodiac_sign(date_value) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        except Exception:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

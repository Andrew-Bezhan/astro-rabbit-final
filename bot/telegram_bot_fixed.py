"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞ –ê—Å—Ç—Ä–æ–±–æ—Ç–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ –±–µ–∑ Application –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Python 3.13
"""

import asyncio
import logging
from typing import Optional

from telegram import Bot, Update
from telegram.error import TelegramError

from .handlers.main_router import MainRouter
from utils.config import load_config
from utils.logger import setup_logger
from database.connection import init_database

logger = setup_logger()


class AstroBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –ê—Å—Ç—Ä–æ–±–æ—Ç–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.config = load_config()
        self.bot: Optional[Bot] = None
        self.handlers: Optional[MainRouter] = None
        self.running = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
        if not self.config.bot.token:
            logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –≤ .env —Ñ–∞–π–ª–µ")
            raise ValueError("Telegram bot token is required")
        
        # –°–æ–∑–¥–∞–µ–º Bot –Ω–∞–ø—Ä—è–º—É—é
        self.bot = Bot(token=self.config.bot.token)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.handlers = MainRouter()
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_contexts = {}
        
        logger.info("ü§ñ AstroBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            if not self.bot:
                logger.error("‚ùå Bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            me = await self.bot.get_me()
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ @{me.username} ({me.first_name})")
            
            # –û—á–∏—â–∞–µ–º webhook
            await self.bot.delete_webhook(drop_pending_updates=True)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π update_id
            updates = await self.bot.get_updates(limit=1)
            last_update_id = updates[-1].update_id if updates else 0
            
            self.running = True
            logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª polling
            while self.running:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    updates = await self.bot.get_updates(
                        offset=last_update_id + 1,
                        timeout=30
                    )
                    
                    for update in updates:
                        last_update_id = update.update_id
                        await self._handle_update(update)
                        
                except TelegramError as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {e}")
                    await asyncio.sleep(5)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                except Exception as e:
                    logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                    await asyncio.sleep(5)
                    
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        finally:
            await self.stop()
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            self.running = False
            if self.bot:
                await self.bot.close()
            logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
    
    async def _handle_update(self, update: Update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            if update.message:
                await self._handle_message(update.message)
            elif update.callback_query:
                await self._handle_callback_query(update.callback_query)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    async def _handle_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            text = message.text
            chat_id = message.chat_id
            user_id = message.from_user.id
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
            update = Update(
                update_id=0,
                message=message
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in self.user_contexts:
                class DummyContext:
                    def __init__(self, bot):
                        self.bot = bot
                        self.user_data = {}
                
                self.user_contexts[user_id] = DummyContext(self.bot)
            
            context = self.user_contexts[user_id]
            
            # –†–æ—É—Ç–∏–Ω–≥ –∫–æ–º–∞–Ω–¥
            if text and text.startswith('/'):
                command = text.split()[0]
                
                if command == '/start':
                    await self.handlers.start_command(update, context)
                elif command == '/help':
                    await self.handlers.help_command(update, context)
                elif command == '/zodiac':
                    await self.handlers.zodiac_command(update, context)
                elif command == '/forecast':
                    await self.handlers.forecast_command(update, context)
                elif command == '/compatibility':
                    await self.handlers.compatibility_command(update, context)
                elif command == '/daily':
                    await self.handlers.daily_command(update, context)
                elif command == '/companies':
                    await self.handlers.companies_command(update, context)
                elif command == '/cabinet':
                    await self.handlers.cabinet_command(update, context)
                elif command == '/tariffs':
                    await self.handlers.tariffs_command(update, context)
                else:
                    await self.handlers.message_handler(update, context)
            else:
                # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                logger.info(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                await self.handlers.message_handler(update, context)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            try:
                await message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            except:
                pass
    
    async def _handle_callback_query(self, callback_query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            callback_data = callback_query.data
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
            update = Update(
                update_id=0,
                callback_query=callback_query
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = callback_query.from_user.id
            if user_id not in self.user_contexts:
                class DummyContext:
                    def __init__(self, bot):
                        self.bot = bot
                        self.user_data = {}
                
                self.user_contexts[user_id] = DummyContext(self.bot)
            
            context = self.user_contexts[user_id]
            
            # –†–æ—É—Ç–∏–Ω–≥ callback'–æ–≤
            if callback_data == "main_menu":
                await self.handlers.start_command(update, context)
            elif callback_data == "companies":
                await self.handlers.companies_command(update, context)
            elif callback_data == "zodiac":
                await self.handlers.zodiac_command(update, context)
            elif callback_data == "forecast":
                await self.handlers.forecast_command(update, context)
            elif callback_data == "compatibility":
                await self.handlers.compatibility_command(update, context)
            elif callback_data == "daily":
                await self.handlers.daily_command(update, context)
            elif callback_data == "settings":
                await self.handlers.cabinet_command(update, context)
            elif callback_data.startswith("zodiac_"):
                await self.handlers.callback_handler(update, context)
            elif callback_data.startswith("compatibility_"):
                await self.handlers.callback_handler(update, context)
            elif callback_data.startswith("daily_"):
                await self.handlers.callback_handler(update, context)
            else:
                await self.handlers.callback_handler(update, context)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            try:
                await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
            except:
                pass

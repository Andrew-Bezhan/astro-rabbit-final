"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞ –ê—Å—Ç—Ä–æ–±–æ—Ç–∞
"""

import asyncio
from telegram import Update
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    filters,
    ContextTypes
)

from .handlers.main_router import MainRouter
from utils.config import load_config
from utils.logger import setup_logger
from database.connection import init_database

logger = setup_logger()


class AstroBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.config = load_config()
        self.handlers = MainRouter()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
        if not self.config.bot.token:
            logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –≤ .env —Ñ–∞–π–ª–µ")
            raise ValueError("Telegram bot token is required")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ—Ä—Å–∏–∏ 20.7
        self.application = Application.builder().token(self.config.bot.token).build()
        
        logger.info("ü§ñ AstroBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self._register_handlers()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –¥–ª—è –≤–µ—Ä—Å–∏–∏ 20.7)
            await self.application.run_polling(
                drop_pending_updates=True,
                allowed_updates=None
            )
            
            logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
            
            if self.application:
                await self.application.stop()
                await self.application.shutdown()
            
            logger.info("‚úÖ Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        app = self.application
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        app.add_handler(CommandHandler("start", self.handlers.start_command))
        app.add_handler(CommandHandler("help", self.handlers.help_command))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é
        app.add_handler(CommandHandler("zodiac", self.handlers.zodiac_command))
        app.add_handler(CommandHandler("forecast", self.handlers.forecast_command))
        app.add_handler(CommandHandler("compatibility", self.handlers.compatibility_command))
        app.add_handler(CommandHandler("companies", self.handlers.companies_command))
        app.add_handler(CommandHandler("cabinet", self.handlers.cabinet_command))
        app.add_handler(CommandHandler("tariffs", self.handlers.tariffs_command))
        app.add_handler(CommandHandler("daily", self.handlers.daily_command))
        app.add_handler(CommandHandler("settings", self.handlers.settings_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ (callback queries)
        app.add_handler(CallbackQueryHandler(self.handlers.callback_handler))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∏—Å–∫–ª—é—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã)
        app.add_handler(MessageHandler(
            filters.TEXT, 
            self.handlers.message_handler
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞) - —É–±–∏—Ä–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –∫–æ–º–∞–Ω–¥—ã —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—ã—à–µ
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        app.add_handler(MessageHandler(
            filters.CONTACT, 
            self._handle_contact
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        app.add_handler(MessageHandler(
            filters.LOCATION, 
            self._handle_location
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        app.add_handler(MessageHandler(
            filters.Document.ALL, 
            self._handle_document
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ - –¥–æ–±–∞–≤–ª—è–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
        async def error_handler_wrapper(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
            if isinstance(update, Update):
                await self._error_handler(update, context)
        
        app.add_error_handler(error_handler_wrapper)
        
        logger.info("üìù –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    async def _setup_bot_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –±–æ—Ç–∞"""
        try:
            from telegram import BotCommand
            
            commands = [
                BotCommand("start", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
                BotCommand("zodiac", "üîÆ –£–∑–Ω–∞—Ç—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏"),
                BotCommand("forecast", "üìà –ë–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏"),
                BotCommand("compatibility", "ü§ù –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"),
                BotCommand("companies", "üè¢ –ú–æ–∏ –∫–æ–º–ø–∞–Ω–∏–∏"),
                BotCommand("cabinet", "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"),
                BotCommand("tariffs", "üí≥ –¢–∞—Ä–∏—Ñ—ã"),
                BotCommand("daily", "üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã"),
                BotCommand("settings", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
                BotCommand("help", "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞")
            ]
            
            await self.application.bot.set_my_commands(commands)
            logger.info(f"üìã –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ {len(commands)} –∫–æ–º–∞–Ω–¥ –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")

    
    async def _handle_contact(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        if not update.message or not update.effective_user or not update.message.contact:
            return
            
        contact = update.message.contact
        user_id = update.effective_user.id
        
        logger.info(f"üìû –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–µ–ª–∏–ª—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º: {contact.phone_number or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
        
        await update.message.reply_text(
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω: {contact.phone_number or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!",
            parse_mode='Markdown'
        )
    
    async def _handle_location(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
        if not update.message or not update.effective_user or not update.message.location:
            return
            
        location = update.message.location
        user_id = update.effective_user.id
        
        logger.info(f"üìç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–µ–ª–∏–ª—Å—è –ª–æ–∫–∞—Ü–∏–µ–π: {location.latitude or 0}, {location.longitude or 0}")
        
        await update.message.reply_text(
            f"üìç –õ–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:\\n"
            f"–®–∏—Ä–æ—Ç–∞: {location.latitude or 0}\\n"
            f"–î–æ–ª–≥–æ—Ç–∞: {location.longitude or 0}\\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!",
            parse_mode='Markdown'
        )
    
    async def _handle_unknown_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        if not update.message or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        command = update.message.text
        
        logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {command}")
        
        await update.message.reply_text(
            "ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=self.handlers.keyboards.get_main_menu()
        )
    
    async def _handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        if not update.message or not update.effective_user or not update.message.document:
            return
            
        document = update.message.document
        user_id = update.effective_user.id
        
        logger.info(f"üìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç: {document.file_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
        
        await update.message.reply_text(
            f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω: {document.file_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\\n"
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.",
            parse_mode='Markdown'
        )
    
    async def _error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}")
        
        if update and update.effective_message:
            try:
                await update.effective_message.reply_text(
                    "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    async def send_daily_forecast(self, user_id: int, company_data: dict):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            company_data (dict): –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
            if self.handlers.astro_agent:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
                news_summary = ""
                if self.handlers.news_analyzer:
                    news_summary = await self.handlers.news_analyzer.get_daily_news_digest()
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
                forecast = await self.handlers.astro_agent.generate_daily_forecast(
                    company_data,
                    daily_astrology="–¢–µ–∫—É—â–∏–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≤–ª–∏—è–Ω–∏—è",
                    today_news=news_summary
                )
            else:
                # –ó–∞–≥–ª—É—à–∫–∞
                from datetime import datetime
                forecast = f"""
üåÖ **–ï–ñ–ï–î–ù–ï–í–ù–´–ô –ü–†–û–ì–ù–û–ó**
üìÖ {datetime.now().strftime('%d.%m.%Y')}

üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {company_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

‚≠ê –°–µ–≥–æ–¥–Ω—è –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π!
üíº –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.
ü§ù –•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –¥–µ–ª–æ–≤—ã—Ö –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤.

üìà –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –≤–∞—à–µ–π —Å—Ñ–µ—Ä–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
                """
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑
            await self.application.bot.send_message(
                chat_id=user_id,
                text=forecast,
                parse_mode='Markdown'
            )
            
            logger.info(f"üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    async def broadcast_message(self, user_ids: list, message: str):
        """
        –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            user_ids (list): –°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        successful = 0
        failed = 0
        
        for user_id in user_ids:
            try:
                await self.application.bot.send_message(
                    chat_id=user_id,
                    text=message,
                    parse_mode='Markdown'
                )
                successful += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
                await asyncio.sleep(0.1)
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                failed += 1
        
        logger.info(f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {successful} —É—Å–ø–µ—à–Ω–æ, {failed} –æ—à–∏–±–æ–∫")
    
    def get_bot_info(self) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
        
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
        """
        return {
            "bot_token_configured": bool(self.config.bot.token),
            "handlers_count": len(self.application.handlers) if self.application else 0,
            "is_running": self.application.running if self.application else False
        }

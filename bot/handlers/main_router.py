# -*- coding: utf-8 -*-
"""
–ì–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞
"""

from typing import Dict, Any
from telegram import Update
from telegram.ext import ContextTypes

from .base_handler import BaseHandler
from .company_handler import CompanyHandler
from .forecast_handler import ForecastHandler
from .zodiac_handler import ZodiacHandler
from .compatibility_handler import CompatibilityHandler
from .daily_handler import DailyHandler
from ..states import BotState
from ..keyboards import BotKeyboards
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from utils.logger import setup_logger
from utils.performance import rate_limit, monitor_performance

logger = setup_logger()


class MainRouter(BaseHandler):
    """–ì–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞"""
        super().__init__()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.company_handler = CompanyHandler()
        self.forecast_handler = ForecastHandler()
        self.zodiac_handler = ZodiacHandler()
        self.compatibility_handler = CompatibilityHandler()
        self.daily_handler = DailyHandler()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        self.keyboards = BotKeyboards()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        if not update.effective_user:
            return
            
        user_id = update.effective_user.id
        user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.state_manager.set_user_state(user_id, BotState.MAIN_MENU)
            
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_text = (
                f"üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!</b>\n\n"
                "–Ø ‚Äî Astro_Rabbit, –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞.\n\n"
                "üîÆ <b>–ß—Ç–æ —è —É–º–µ—é:</b>\n"
                "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π\n"
                "‚Ä¢ –°–æ—Å—Ç–∞–≤–ª—è—Ç—å –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑—ã\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏\n"
                "‚Ä¢ –î–∞–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            
            if update.message:
                await update.message.reply_text(
                    welcome_text,
                    parse_mode='HTML',
                    reply_markup=self.keyboards.get_main_menu_keyboard()
                )
            else:
                await update.callback_query.edit_message_text(
                    welcome_text,
                    parse_mode='HTML',
                    reply_markup=self.keyboards.get_main_menu_keyboard()
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
            if update.message:
                await update.message.reply_text(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                    reply_markup=self.keyboards.get_main_menu_keyboard()
                )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        if not update.effective_user:
            return
            
        help_text = (
            "üìñ <b>–°–ü–†–ê–í–ö–ê –ü–û –ë–û–¢–£</b>\n\n"
            "üîÆ <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
            "‚Ä¢ <b>–ú–æ–∏ –∫–æ–º–ø–∞–Ω–∏–∏</b> ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –∫–æ–º–ø–∞–Ω–∏–π\n"
            "‚Ä¢ <b>–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞</b> ‚Äî –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏\n"
            "‚Ä¢ <b>–ë–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑</b> ‚Äî –ø–æ–ª–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏\n"
            "‚Ä¢ <b>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å</b> ‚Äî –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏\n"
            "‚Ä¢ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã</b> ‚Äî —É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
            "üí° <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>\n"
            "1. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ–∏ –∫–æ–º–ø–∞–Ω–∏–∏¬ª\n"
            "2. –°–¥–µ–ª–∞–π—Ç–µ –µ—ë –∞–∫—Ç–∏–≤–Ω–æ–π\n"
            "3. –ü–æ–ª—É—á–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã!\n\n"
            "‚ùì <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @admin"
        )
        
        try:
            if update.message:
                await update.message.reply_text(
                    help_text,
                    parse_mode='HTML',
                    reply_markup=self.keyboards.get_back_inline_button()
                )
            else:
                await update.callback_query.edit_message_text(
                    help_text,
                    parse_mode='HTML',
                    reply_markup=self.keyboards.get_back_inline_button()
                )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help: {e}")
    
    async def companies_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /companies"""
        await self.company_handler.show_companies_menu(update, context)
    
    async def zodiac_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /zodiac"""
        if not update.effective_user:
            return
            
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
        user_data = self.state_manager.get_user_data(user_id)
        active_company_id = user_data.get('active_company_id')
        
        if not active_company_id:
            await self._show_no_active_company_message(update)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–Ω–∞–ª–∏–∑—É
        company_data = await self._get_company_data(user_id, active_company_id)
        if not company_data:
            await self._show_no_active_company_message(update)
            return
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞
        await self.zodiac_handler.show_zodiac_menu(update, context)
    
    @rate_limit()
    @monitor_performance("forecast_command")
    async def forecast_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /forecast"""
        if not update.effective_user:
            return
            
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
        user_data = self.state_manager.get_user_data(user_id)
        active_company_id = user_data.get('active_company_id')
        
        if not active_company_id:
            await self._show_no_active_company_message(update)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ–≥–Ω–æ–∑—É
        company_data = await self._get_company_data(user_id, active_company_id)
        if not company_data:
            await self._show_no_active_company_message(update)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        context.user_data['selected_company'] = company_data
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞
        await self.forecast_handler.handle_company_business_forecast(update, context)
    
    async def compatibility_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /compatibility"""
        await self.compatibility_handler.show_compatibility_menu(update, context)
    
    async def daily_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /daily"""
        await self.daily_handler.show_daily_menu(update, context)
    
    async def cabinet_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cabinet"""
        await self._show_coming_soon_message(update, "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
    
    async def tariffs_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tariffs"""
        await self._show_coming_soon_message(update, "–¢–∞—Ä–∏—Ñ—ã")
    
    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
        await self._show_coming_soon_message(update, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    
    async def message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not update.effective_user or not update.message:
            return
            
        user_id = update.effective_user.id
        text = update.message.text.strip()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_state = self.state_manager.get_user_state(user_id)
            
            # –†–æ—É—Ç–∏–Ω–≥ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
            if user_state == BotState.COMPANY_NAME_INPUT:
                await self.company_handler.handle_company_name_input(update, context, text)
            elif user_state == BotState.COMPANY_REG_DATE_INPUT:
                await self.company_handler.handle_registration_date_input(update, context, text)
            elif user_state == BotState.COMPANY_REG_PLACE_INPUT:
                await self.company_handler.handle_registration_place_input(update, context, text)
            elif user_state == BotState.COMPANY_OWNER_NAME_INPUT:
                await self.company_handler.handle_owner_name_input(update, context, text)
            elif user_state == BotState.COMPANY_OWNER_BIRTH_INPUT:
                await self.company_handler.handle_owner_birth_input(update, context, text)
            elif user_state == BotState.COMPANY_DIRECTOR_NAME_INPUT:
                await self.company_handler.handle_director_name_input(update, context, text)
            elif user_state == BotState.COMPANY_DIRECTOR_BIRTH_INPUT:
                await self.company_handler.handle_director_birth_input(update, context, text)
            elif user_state == BotState.MAIN_MENU:
                await self._handle_main_menu(update, context, text)
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
                user_id = update.effective_user.id
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è CompatibilityHandler
                compatibility_state = self.compatibility_handler.get_user_state(user_id)
                if compatibility_state:
                    if compatibility_state.get('step') == 'waiting_for_first_object':
                        await self.compatibility_handler.handle_first_object_input(update, context)
                    elif compatibility_state.get('step') == 'waiting_for_second_object':
                        await self.compatibility_handler.handle_second_object_input(update, context)
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è DailyHandler
                daily_state = self.daily_handler.get_user_state(user_id)
                if daily_state:
                    if daily_state.get('step') == 'waiting_for_company':
                        await self.daily_handler.handle_company_input(update, context)
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è CompanyHandler
                company_state = self.state_manager.get_user_state(user_id)
                if company_state:
                    if company_state == BotState.COMPANY_NAME_INPUT:
                        await self.company_handler.handle_company_name_input(update, context, text)
                    elif company_state == BotState.COMPANY_REG_DATE_INPUT:
                        await self.company_handler.handle_registration_date_input(update, context, text)
                    elif company_state == BotState.COMPANY_REG_CITY_INPUT:
                        await self.company_handler.handle_registration_city_input(update, context, text)
                    elif company_state == BotState.COMPANY_OWNER_NAME_INPUT:
                        await self.company_handler.handle_owner_name_input(update, context, text)
                    elif company_state == BotState.COMPANY_OWNER_BIRTH_INPUT:
                        await self.company_handler.handle_owner_birth_input(update, context, text)
                    elif company_state == BotState.COMPANY_DIRECTOR_NAME_INPUT:
                        await self.company_handler.handle_director_name_input(update, context, text)
                    elif company_state == BotState.COMPANY_DIRECTOR_BIRTH_INPUT:
                        await self.company_handler.handle_director_birth_input(update, context, text)
                    return
                
                await self._handle_unknown_state(update, context, text)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                reply_markup=self.keyboards.get_main_menu_keyboard()
            )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
    
    async def callback_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if not update.callback_query or not update.effective_user:
            return
            
        query = update.callback_query
        callback_data = query.data
        
        try:
            # –†–æ—É—Ç–∏–Ω–≥ callback –∑–∞–ø—Ä–æ—Å–æ–≤
            if callback_data == "companies" or callback_data == "companies_menu":
                await self.company_handler.show_companies_menu(update, context)
            elif callback_data == "add_company":
                await self.company_handler.start_add_company(update, context)
            elif callback_data.startswith("select_company_"):
                company_id = callback_data.replace("select_company_", "")
                await self.company_handler.select_company(update, context, company_id)
            elif callback_data.startswith("set_active_company_"):
                company_id = callback_data.replace("set_active_company_", "")
                await self.company_handler.set_active_company(update, context, company_id)
            elif callback_data.startswith("delete_company_"):
                company_id = callback_data.replace("delete_company_", "")
                await self.company_handler.delete_company(update, context, company_id)
            elif callback_data.startswith("analyze_company_"):
                company_id = callback_data.replace("analyze_company_", "")
                await self.company_handler.analyze_company(update, context, company_id)
            elif callback_data.startswith("sphere_"):
                await self.company_handler.handle_sphere_selection(update, context, callback_data)
            elif callback_data.startswith("forecast_"):
                await self._handle_forecast_callback(update, context, callback_data)
            elif callback_data == "zodiac_menu":
                await self.zodiac_handler.show_zodiac_menu(update, context)
            elif callback_data.startswith("zodiac_analysis_"):
                await self.zodiac_handler.analyze_zodiac_sign(update, context)
            elif callback_data.startswith("compatibility_"):
                await self.compatibility_handler.start_compatibility_analysis(update, context)
            elif callback_data == "compatibility_menu":
                await self.compatibility_handler.show_compatibility_menu(update, context)
            elif callback_data == "daily_menu":
                await self.daily_handler.show_daily_menu(update, context)
            elif callback_data.startswith("daily_"):
                await self.daily_handler.start_daily_forecast(update, context)
            elif callback_data == "back_to_main_menu" or callback_data == "main_menu":
                await self.start_command(update, context)
            elif callback_data == "zodiac":
                await self.zodiac_command(update, context)
            elif callback_data == "forecast":
                await self.forecast_command(update, context)
            elif callback_data == "compatibility":
                await self.compatibility_command(update, context)
            elif callback_data == "daily":
                await self.daily_command(update, context)
            elif callback_data == "settings":
                await self.settings_command(update, context)
            else:
                await self._handle_unknown_callback(update, context, callback_data)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            await query.edit_message_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                reply_markup=self.keyboards.get_back_inline_button()
            )
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    async def _handle_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
        if not update.message:
            return
            
        # –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é
        if "–∫–æ–º–ø–∞–Ω–∏–∏" in text.lower():
            await self.companies_command(update, context)
        elif "–ø—Ä–æ–≥–Ω–æ–∑" in text.lower():
            await self.forecast_command(update, context)
        elif "–∑–Ω–∞–∫" in text.lower() or "–∑–æ–¥–∏–∞–∫" in text.lower():
            await self.zodiac_command(update, context)
        elif "—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å" in text.lower():
            await self.compatibility_command(update, context)
        elif "–ø–æ–º–æ—â—å" in text.lower() or "help" in text.lower():
            await self.help_command(update, context)
        else:
            await update.message.reply_text(
                "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n\n"
                "/companies - –ú–æ–∏ –∫–æ–º–ø–∞–Ω–∏–∏\n"
                "/forecast - –ë–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑\n"
                "/zodiac - –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞\n"
                "/help - –°–ø—Ä–∞–≤–∫–∞",
                reply_markup=self.keyboards.get_main_menu_keyboard()
            )
    
    async def _handle_forecast_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
        if callback_data == "forecast_quick":
            await self.forecast_handler.handle_quick_forecast(update, context)
        elif callback_data == "forecast_financial":
            await self.forecast_handler.handle_financial_forecast(update, context)
        elif callback_data == "forecast_partnership":
            await self.forecast_handler.handle_partnership_forecast(update, context)
        elif callback_data == "forecast_risk":
            await self.forecast_handler.handle_risk_forecast(update, context)
        else:
            await self._handle_unknown_callback(update, context, callback_data)
    
    async def _show_no_active_company_message(self, update: Update):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏"""
        message_text = (
            "‚ùå <b>–ù–ï–¢ –ê–ö–¢–ò–í–ù–û–ô –ö–û–ú–ü–ê–ù–ò–ò</b>\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –∏ —Å–¥–µ–ª–∞–π—Ç–µ –µ—ë –∞–∫—Ç–∏–≤–Ω–æ–π.\n\n"
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´–ú–æ–∏ –∫–æ–º–ø–∞–Ω–∏–∏¬ª:"
        )
        
        if update.message:
            await update.message.reply_text(
                message_text,
                parse_mode='HTML',
                reply_markup=self.keyboards.get_main_menu_keyboard()
            )
        else:
            await update.callback_query.edit_message_text(
                message_text,
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üè¢ –ú–æ–∏ –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="companies_menu")],
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
                ])
            )
    
    async def _show_coming_soon_message(self, update: Update, feature_name: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏"""
        message_text = f"üöß <b>{feature_name.upper()}</b>\n\n–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!"
        
        if update.message:
            await update.message.reply_text(
                message_text,
                parse_mode='HTML',
                reply_markup=self.keyboards.get_back_inline_button()
            )
        else:
            await update.callback_query.edit_message_text(
                message_text,
                parse_mode='HTML',
                reply_markup=self.keyboards.get_back_inline_button()
            )
    
    async def _handle_unknown_state(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if not update.message:
            return
            
        await update.message.reply_text(
            "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=self.keyboards.get_main_menu_keyboard()
        )
    
    async def _handle_unknown_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ callback"""
        if not update.callback_query:
            return
            
        logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {callback_data}")
        await update.callback_query.edit_message_text(
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=self.keyboards.get_main_menu_keyboard()
        )
    
    # –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    async def contact_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        if not update.message:
            return
        await update.message.reply_text("üìû –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
    
    async def document_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        if not update.message:
            return
        await update.message.reply_text("üìÑ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")

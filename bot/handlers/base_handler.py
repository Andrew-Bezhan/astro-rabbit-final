# -*- coding: utf-8 -*-
"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞
"""

import re
from datetime import datetime
from typing import Dict, Any, Optional
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

from ..keyboards import BotKeyboards
from ..states import StateManager
from database.connection import get_session
from database.crud import UserCRUD, CompanyCRUD
from utils.helpers import validate_date, clean_company_name, is_valid_russian_name
from utils.logger import setup_logger
from utils.cache import cache_news_data, cache_astro_data, cache_company_data
from utils.performance import monitor_performance, rate_limit

logger = setup_logger()


class BaseHandler:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        self.state_manager = StateManager()
        self.keyboards = BotKeyboards()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–µ—Ä–≤–∏—Å—ã –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
        from ..services_manager import ServicesManager
        services = ServicesManager.get_instance()
        
        self.astro_agent = services.astro_agent
        self.numerology = services.numerology
        self.news_analyzer = services.news_analyzer
        self.validator = services.validator
        self.embedding_manager = services.embedding_manager
        
        logger.info("‚úÖ BaseHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –æ–±—â–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏")
    
    # –û–±—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
    
    @monitor_performance("get_news_data", slow_threshold=2.0)
    @cache_news_data(ttl=600)  # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 10 –º–∏–Ω—É—Ç
    async def _get_news_data(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            if self.news_analyzer:
                news_data = await self.news_analyzer.get_latest_news()
                return news_data if news_data else "–ù–æ–≤–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            return "–°–µ—Ä–≤–∏—Å –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"
    
    @monitor_performance("get_daily_astrology", slow_threshold=1.0)
    @cache_astro_data(ttl=1800)  # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 30 –º–∏–Ω—É—Ç
    async def _get_daily_astrology(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            return "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏: {e}")
            return "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    async def _get_company_data(self, user_id: int, company_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –±–∞–∑—ã"""
        try:
            user_data = self.state_manager.get_user_data(user_id)
            companies = user_data.get('companies', [])
            
            for company in companies:
                if str(company.get('id')) == str(company_id):
                    return company
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
            return None
    
    def _clean_html_tags(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ HTML —Ç–µ–≥–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        if not text:
            return ""
        
        # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
        clean_text = re.sub(r'<[^>]+>', '', text)
        
        # –ó–∞–º–µ–Ω—è–µ–º HTML —Å—É—â–Ω–æ—Å—Ç–∏
        clean_text = clean_text.replace('&amp;', '&')
        clean_text = clean_text.replace('&lt;', '<')
        clean_text = clean_text.replace('&gt;', '>')
        clean_text = clean_text.replace('&quot;', '"')
        clean_text = clean_text.replace('&#39;', "'")
        
        return clean_text.strip()
    
    def _split_long_text(self, text: str, max_length: int = 4000) -> list:
        """–†–∞–∑–±–∏–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏"""
        if not text or len(text) <= max_length:
            return [text]
        
        parts = []
        current_part = ""
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∞–±–∑–∞—Ü–∞–º
        paragraphs = text.split('\n\n')
        
        for paragraph in paragraphs:
            # –ï—Å–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å–∞–º –ø–æ —Å–µ–±–µ –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ
            if len(paragraph) > max_length:
                if current_part:
                    parts.append(current_part.strip())
                    current_part = ""
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
                sentences = paragraph.split('. ')
                temp_part = ""
                
                for sentence in sentences:
                    if len(temp_part + sentence) > max_length:
                        if temp_part:
                            parts.append(temp_part.strip())
                        temp_part = sentence
                    else:
                        temp_part += ". " + sentence if temp_part else sentence
                
                if temp_part:
                    current_part = temp_part
            else:
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —á–∞—Å—Ç—å + –ø–∞—Ä–∞–≥—Ä–∞—Ñ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—Ç –ª–∏–º–∏—Ç
                if len(current_part + paragraph) <= max_length:
                    current_part += "\n\n" + paragraph if current_part else paragraph
                else:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
                    if current_part:
                        parts.append(current_part.strip())
                    current_part = paragraph
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
        if current_part:
            parts.append(current_part.strip())
        
        return parts if parts else [text]
    
    async def _send_long_message(self, update: Update, text: str, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —á–∞—Å—Ç–∏"""
        text_parts = self._split_long_text(text)
        
        if len(text_parts) == 1:
            # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            if update.callback_query:
                await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
            else:
                await update.message.reply_text(text, reply_markup=reply_markup)
        else:
            # –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            if update.callback_query:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç—å—é
                await update.callback_query.edit_message_text(
                    f"{text_parts[0]}\n\nüìÑ –ß–∞—Å—Ç—å 1 –∏–∑ {len(text_parts)}",
                    reply_markup=reply_markup
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–∞–∫ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                for i, part in enumerate(text_parts[1:], 2):
                    await update.callback_query.message.reply_text(
                        f"{part}\n\nüìÑ –ß–∞—Å—Ç—å {i} –∏–∑ {len(text_parts)}"
                    )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –∫–∞–∫ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                for i, part in enumerate(text_parts, 1):
                    await update.message.reply_text(
                        f"{part}\n\nüìÑ –ß–∞—Å—Ç—å {i} –∏–∑ {len(text_parts)}",
                        reply_markup=reply_markup if i == len(text_parts) else None
                    )
    
    async def _auto_save_analysis(self, user_id: int, company_data: dict, analysis_type: str, analysis_result: str):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            user_data = self.state_manager.get_user_data(user_id)
            
            if 'saved_analyses' not in user_data:
                user_data['saved_analyses'] = []
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∞–Ω–∞–ª–∏–∑–∞
            analysis_record = {
                'id': len(user_data['saved_analyses']) + 1,
                'company_name': company_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                'company_id': company_data.get('id'),
                'analysis_type': analysis_type,
                'result': analysis_result,
                'timestamp': datetime.now().isoformat(),
                'auto_saved': True
            }
            
            user_data['saved_analyses'].append(analysis_record)
            self.state_manager.save_user_data(user_id, user_data)
            
            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ {analysis_type} –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {company_data.get('name')} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    
    def _validate_company_name(self, name: str) -> tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ companies.py"""
        if not name or len(name.strip()) < 2:
            return False, "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞"
        
        if len(name) > 20:
            return False, "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤)"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        if not re.match(r'^[–∞-—è–ê-–Ø—ë–Åa-zA-Z0-9\s\-\.\,\"\']+$', name):
            return False, "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã"
        
        return True, ""
    
    def _validate_registration_date(self, date_str: str) -> tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        if not date_str:
            return False, "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π"
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
            if not re.match(r'^\d{4}-\d{2}-\d{2}$', date_str):
                return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º
            from datetime import datetime
            date_obj = datetime.strptime(date_str, '%Y-%m-%d')
            if date_obj.date() > datetime.now().date():
                return False, "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º"
            
            return True, ""
        except ValueError:
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã"
    
    def _validate_registration_place(self, place: str) -> tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        if not place or len(place.strip()) < 2:
            return False, "–ú–µ—Å—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞"
        
        if len(place) > 100:
            return False, "–ú–µ—Å—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        if not re.match(r'^[–∞-—è–ê-–Ø—ë–Åa-zA-Z\s\-\.]+$', place):
            return False, "–ú–µ—Å—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã"
        
        return True, ""
    
    def _validate_person_name(self, name: str) -> tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ —á–µ–ª–æ–≤–µ–∫–∞"""
        if not name or len(name.strip()) < 2:
            return False, "–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞"
        
        if len(name) > 100:
            return False, "–§–ò–û —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã
        if not re.match(r'^[–∞-—è–ê-–Ø—ë–Åa-zA-Z\s\-\.]+$', name):
            return False, "–§–ò–û —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã"
        
        return True, ""
    
    def _validate_birth_date(self, date_str: str) -> tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
        if not date_str:
            return False, "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π"
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
            if not re.match(r'^\d{4}-\d{2}-\d{2}$', date_str):
                return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞—è
            from datetime import datetime
            date_obj = datetime.strptime(date_str, '%Y-%m-%d')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º
            if date_obj.date() > datetime.now().date():
                return False, "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (–æ—Ç 18 –¥–æ 100 –ª–µ—Ç)
            age = (datetime.now().date() - date_obj.date()).days / 365.25
            if age < 18:
                return False, "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 18 –ª–µ—Ç"
            if age > 100:
                return False, "–í–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 –ª–µ—Ç"
            
            return True, ""
        except ValueError:
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã"
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    
    def _get_or_create_user(self, telegram_id: int, username: str = None, 
                           first_name: str = None, last_name: str = None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        with get_session() as session:
            try:
                user = UserCRUD.get_or_create_user(
                    session, telegram_id, username, first_name, last_name
                )
                session.commit()
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ ID, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Å—Å–∏–µ–π
                return user.id
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                session.rollback()
                return None
    
    def _get_user_companies(self, user_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        logger.info(f"üîç _get_user_companies –≤—ã–∑–≤–∞–Ω —Å user_id: {user_id} (—Ç–∏–ø: {type(user_id)})")
        
        with get_session() as session:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º –¥–∞—Ç
                logger.info(f"üîç –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∑–∞–ø—Ä–æ—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º: {user_id}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º text() –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                from sqlalchemy import text
                result = session.execute(
                    text("SELECT id, name, registration_date, registration_place, industry, owner_name, owner_birth_date, director_name, director_birth_date, is_active "
                         "FROM companies WHERE owner_id = :user_id AND is_active = 1 ORDER BY created_at DESC"),
                    {"user_id": user_id}
                )
                
                logger.info(f"üîç SQL –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                companies = []
                for row in result:
                    companies.append({
                        'id': row[0],
                        'name': row[1],
                        'registration_date': row[2],  # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                        'registration_place': row[3],
                        'industry': row[4],
                        'owner_name': row[5] if row[5] else None,
                        'owner_birth_date': row[6] if row[6] else None,
                        'director_name': row[7] if row[7] else None,
                        'director_birth_date': row[8] if row[8] else None,
                        'is_active': bool(row[9])
                    })
                
                logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: {len(companies)}")
                
                return companies
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                return []
    
    def _create_company(self, user_id: int, name: str, registration_date: datetime,
                       registration_place: str, industry: str = None, **kwargs):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        with get_session() as session:
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
                date_str = registration_date.strftime('%Y-%m-%d')
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—ã—Ä–æ–π SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
                from sqlalchemy import text
                result = session.execute(
                    text("INSERT INTO companies (owner_id, name, registration_date, registration_place, industry, is_active, created_at, updated_at) "
                         "VALUES (:user_id, :name, :date_str, :registration_place, :industry, 1, datetime('now'), datetime('now'))"),
                    {
                        "user_id": user_id,
                        "name": name,
                        "date_str": date_str,
                        "registration_place": registration_place,
                        "industry": industry
                    }
                )
                session.commit()
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
                company_id = result.lastrowid
                company_data = {
                    'id': company_id,
                    'name': name,
                    'registration_date': date_str,
                    'registration_place': registration_place,
                    'industry': industry,
                    'is_active': True
                }
                
                logger.info(f"üè¢ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è: {name} (ID: {company_id})")
                return company_data
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
                session.rollback()
                return None
    
    def _create_company_full(self, user_id: int, name: str, registration_date: datetime,
                            registration_place: str, industry: str = None, 
                            owner_name: str = None, owner_birth_date: datetime = None,
                            director_name: str = None, director_birth_date: datetime = None, **kwargs):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        with get_session() as session:
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—ã –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
                reg_date_str = registration_date.strftime('%Y-%m-%d')
                owner_birth_str = owner_birth_date.strftime('%Y-%m-%d') if owner_birth_date else None
                director_birth_str = director_birth_date.strftime('%Y-%m-%d') if director_birth_date else None
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—ã—Ä–æ–π SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
                from sqlalchemy import text
                result = session.execute(
                    text("INSERT INTO companies (owner_id, name, registration_date, registration_place, industry, "
                         "owner_name, owner_birth_date, director_name, director_birth_date, "
                         "is_active, created_at, updated_at) "
                         "VALUES (:user_id, :name, :reg_date_str, :registration_place, :industry, "
                         ":owner_name, :owner_birth_str, :director_name, :director_birth_str, "
                         "1, datetime('now'), datetime('now'))"),
                    {
                        "user_id": user_id,
                        "name": name,
                        "reg_date_str": reg_date_str,
                        "registration_place": registration_place,
                        "industry": industry,
                        "owner_name": owner_name,
                        "owner_birth_str": owner_birth_str,
                        "director_name": director_name,
                        "director_birth_str": director_birth_str
                    }
                )
                session.commit()
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
                company_id = result.lastrowid
                company_data = {
                    'id': company_id,
                    'name': name,
                    'registration_date': reg_date_str,
                    'registration_place': registration_place,
                    'industry': industry,
                    'owner_name': owner_name,
                    'owner_birth_date': owner_birth_str,
                    'director_name': director_name,
                    'director_birth_date': director_birth_str,
                    'is_active': True
                }
                
                logger.info(f"üè¢ –°–æ–∑–¥–∞–Ω–∞ –ø–æ–ª–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è: {name} (ID: {company_id})")
                return company_data
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
                session.rollback()
                return None
    
    def _delete_company(self, company_id: int, user_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with get_session() as session:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—ã—Ä–æ–π SQL –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
                from sqlalchemy import text
                result = session.execute(
                    text("UPDATE companies SET is_active = 0, updated_at = datetime('now') WHERE id = :company_id AND owner_id = :user_id"),
                    {"company_id": company_id, "user_id": user_id}
                )
                session.commit()
                
                success = result.rowcount > 0
                if success:
                    logger.info(f"üóëÔ∏è –ö–æ–º–ø–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞: ID {company_id}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ID {company_id}")
                
                return success
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
                session.rollback()
                return False

# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑–æ–≤
"""

from typing import Dict, Any, Optional
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

from .base_handler import BaseHandler
from ..keyboards import create_forecast_options_keyboard
from ai_astrologist.prompts import (
    BUSINESS_FORECAST_PROMPT,
    QUICK_FORECAST_PROMPT, 
    FINANCIAL_FORECAST_PROMPT, 
    PARTNERSHIP_FORECAST_PROMPT, 
    RISK_FORECAST_PROMPT
)
from utils.logger import setup_logger

logger = setup_logger()


class ForecastHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
    
    async def handle_company_business_forecast(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑–∞ –∫–æ–º–ø–∞–Ω–∏–∏"""
        if not update.callback_query or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        query = update.callback_query
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ context.user_data (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ)
            company_data = None
            if context.user_data and 'selected_company' in context.user_data:
                company_data = context.user_data['selected_company']
            
            if not company_data:
                await query.edit_message_text(
                    "‚ùå –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º —Å –∫–æ–º–ø–∞–Ω–∏–µ–π", callback_data="back_to_company_actions")]
                    ])
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            await query.edit_message_text(
                "üìà –°–æ—Å—Ç–∞–≤–ª—è—é –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑ –∫–æ–º–ø–∞–Ω–∏–∏...\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
                parse_mode=None
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
            news_data = ""
            try:
                if self.news_analyzer and company_data and company_data.get('business_sphere'):
                    news_analysis = await self.news_analyzer.analyze_news_for_company(
                        company_sphere=company_data.get('business_sphere', ''),
                        days_back=7
                    )
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å—Ç—Ä–æ–∫—É
                    if isinstance(news_analysis, dict) and 'summary' in news_analysis:
                        news_data = str(news_analysis['summary'])
                    else:
                        news_data = str(news_analysis)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏: {e}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑
            try:
                forecast_result = await self.astro_agent.generate_business_forecast(
                    company_data=company_data,
                    astrology_data="",
                    news_data=news_data
                )
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
                await query.edit_message_text(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑–∞:\n\n{str(e)}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º —Å –∫–æ–º–ø–∞–Ω–∏–µ–π", callback_data="back_to_company_actions")]
                    ])
                )
                return
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            if self.validator:
                try:
                    forecast_result = await self.validator.validate_and_fix(
                        forecast_result, "forecast", BUSINESS_FORECAST_PROMPT
                    )
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏.")
            
            # –û—á–∏—â–∞–µ–º HTML-—Ç–µ–≥–∏
            forecast_result = self._clean_html_tags(forecast_result)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
            await self._auto_save_analysis(user_id, company_data, "forecast", forecast_result)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
            text_parts = self._split_long_text(forecast_result)
            
            if len(text_parts) == 1:
                # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π
                await query.edit_message_text(
                    f"<b>üìà –ë–ò–ó–ù–ï–°-–ü–†–û–ì–ù–û–ó –ö–û–ú–ü–ê–ù–ò–ò</b>\n\n{forecast_result}",
                    parse_mode='HTML',
                    reply_markup=create_forecast_options_keyboard()
                )
            else:
                # –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ context.user_data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if context.user_data is not None:
                    context.user_data.update({
                        'analysis_parts': text_parts,
                        'total_parts': len(text_parts),
                        'current_part_index': 1,
                        'analysis_type': 'forecast',
                        'last_analysis_result': forecast_result,
                        'last_analysis_type': 'forecast'
                    })
                else:
                    logger.warning("‚ö†Ô∏è context.user_data is None, –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
                first_part = text_parts[0]
                keyboard = []
                
                if len(text_parts) > 1:
                    keyboard.append([InlineKeyboardButton("üìÑ –°–ª–µ–¥—É—é—â–∞—è —á–∞—Å—Ç—å", callback_data="next_part_2")])
                
                keyboard.append([InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º —Å –∫–æ–º–ø–∞–Ω–∏–µ–π", callback_data="back_to_company_actions")])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    f"<b>üìà –ë–ò–ó–ù–ï–°-–ü–†–û–ì–ù–û–ó –ö–û–ú–ü–ê–ù–ò–ò</b>\n\n{first_part}\n\nüìÑ –ü–æ–∫–∞–∑–∞–Ω–æ 1 –∏–∑ {len(text_parts)} —á–∞—Å—Ç–µ–π",
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑–∞ –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –¥–µ–π—Å—Ç–≤–∏—è–º —Å –∫–æ–º–ø–∞–Ω–∏–µ–π", callback_data="back_to_company_actions")]
                ])
            )
    
    async def handle_quick_forecast(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞"""
        if not update.callback_query or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        query = update.callback_query
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
            user_data = self.state_manager.get_user_data(user_id)
            active_company_id = getattr(user_data, 'active_company_id', None)
            
            if not active_company_id:
                await query.edit_message_text(
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ö –ø—Ä–æ–≥–Ω–æ–∑—É", callback_data="back_to_forecast")]
                    ])
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –±–∞–∑—ã
            company_data = await self._get_company_data(user_id, active_company_id)
            if not company_data:
                await query.edit_message_text(
                    "‚ùå –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ö –ø—Ä–æ–≥–Ω–æ–∑—É", callback_data="back_to_forecast")]
                    ])
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            await query.edit_message_text("üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –±—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –º–µ—Å—è—Ü–∞...")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            news_data = await self._get_news_data()
            daily_astrology = await self._get_daily_astrology()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
            forecast_result = await self.astro_agent.generate_forecast(
                prompt=QUICK_FORECAST_PROMPT,
                company_data=company_data,
                news_data=news_data,
                daily_astrology=daily_astrology
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await query.edit_message_text(
                forecast_result,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –ø—Ä–æ–≥–Ω–æ–∑—É", callback_data="back_to_forecast")]
                ])
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –ø—Ä–æ–≥–Ω–æ–∑—É", callback_data="back_to_forecast")]
                ])
            )
    
    async def handle_financial_forecast(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤"""
        if not update.callback_query or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        query = update.callback_query
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
            user_data = self.state_manager.get_user_data(user_id)
            active_company_id = getattr(user_data, 'active_company_id', None)
            
            if not active_company_id:
                await query.edit_message_text(
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ö –ø—Ä–æ–≥–Ω–æ–∑—É", callback_data="back_to_forecast")]
                    ])
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –±–∞–∑—ã
            company_data = await self._get_company_data(user_id, active_company_id)
            if not company_data:
                await query.edit_message_text(
                    "‚ùå –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ö –ø—Ä–æ–≥–Ω–æ–∑—É", callback_data="back_to_forecast")]
                    ])
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            await query.edit_message_text("üí∞ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑...")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            news_data = await self._get_news_data()
            daily_astrology = await self._get_daily_astrology()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
            forecast_result = await self.astro_agent.generate_forecast(
                prompt=FINANCIAL_FORECAST_PROMPT,
                company_data=company_data,
                news_data=news_data,
                daily_astrology=daily_astrology
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await query.edit_message_text(
                forecast_result,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –ø—Ä–æ–≥–Ω–æ–∑—É", callback_data="back_to_forecast")]
                ])
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –ø—Ä–æ–≥–Ω–æ–∑—É", callback_data="back_to_forecast")]
                ])
            )
    
    async def handle_partnership_forecast(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞"""
        if not update.callback_query or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        query = update.callback_query
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
            user_data = self.state_manager.get_user_data(user_id)
            active_company_id = getattr(user_data, 'active_company_id', None)
            
            if not active_company_id:
                await query.edit_message_text(
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ö –ø—Ä–æ–≥–Ω–æ–∑—É", callback_data="back_to_forecast")]
                    ])
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –±–∞–∑—ã
            company_data = await self._get_company_data(user_id, active_company_id)
            if not company_data:
                await query.edit_message_text(
                    "‚ùå –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ö –ø—Ä–æ–≥–Ω–æ–∑—É", callback_data="back_to_forecast")]
                    ])
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            await query.edit_message_text("ü§ù –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–≥–Ω–æ–∑ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞...")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            news_data = await self._get_news_data()
            daily_astrology = await self._get_daily_astrology()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
            forecast_result = await self.astro_agent.generate_forecast(
                prompt=PARTNERSHIP_FORECAST_PROMPT,
                company_data=company_data,
                news_data=news_data,
                daily_astrology=daily_astrology
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await query.edit_message_text(
                forecast_result,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –ø—Ä–æ–≥–Ω–æ–∑—É", callback_data="back_to_forecast")]
                ])
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞: {e}")
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –ø—Ä–æ–≥–Ω–æ–∑—É", callback_data="back_to_forecast")]
                ])
            )
    
    async def handle_risk_forecast(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ä–∏—Å–∫–æ–≤"""
        if not update.callback_query or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        query = update.callback_query
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
            user_data = self.state_manager.get_user_data(user_id)
            active_company_id = getattr(user_data, 'active_company_id', None)
            
            if not active_company_id:
                await query.edit_message_text(
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ö –ø—Ä–æ–≥–Ω–æ–∑—É", callback_data="back_to_forecast")]
                    ])
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –±–∞–∑—ã
            company_data = await self._get_company_data(user_id, active_company_id)
            if not company_data:
                await query.edit_message_text(
                    "‚ùå –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ö –ø—Ä–æ–≥–Ω–æ–∑—É", callback_data="back_to_forecast")]
                    ])
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            await query.edit_message_text("‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–≥–Ω–æ–∑ —Ä–∏—Å–∫–æ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            news_data = await self._get_news_data()
            daily_astrology = await self._get_daily_astrology()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
            forecast_result = await self.astro_agent.generate_forecast(
                prompt=RISK_FORECAST_PROMPT,
                company_data=company_data,
                news_data=news_data,
                daily_astrology=daily_astrology
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await query.edit_message_text(
                forecast_result,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –ø—Ä–æ–≥–Ω–æ–∑—É", callback_data="back_to_forecast")]
                ])
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ä–∏—Å–∫–æ–≤: {e}")
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –ø—Ä–æ–≥–Ω–æ–∑—É", callback_data="back_to_forecast")]
                ])
            )

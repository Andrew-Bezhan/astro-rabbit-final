# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏—è–º–∏
"""

import uuid
from datetime import datetime
from typing import Dict, Any, Optional
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

from .base_handler import BaseHandler
from ..states import BotState
from ai_astrologist.prompts import COMPANY_ZODIAC_INFO_PROMPT
from database.connection import get_session
from database.crud import CompanyCRUD
from utils.helpers import validate_date, clean_company_name, is_valid_russian_name
from utils.logger import setup_logger

logger = setup_logger()


class CompanyHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏—è–º–∏"""
    
    async def show_companies_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏—è–º–∏"""
        if not update.callback_query or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        query = update.callback_query
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user_id_db = self._get_or_create_user(
                user_id, 
                update.effective_user.username,
                update.effective_user.first_name,
                update.effective_user.last_name
            )
            
            if not user_id_db:
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
                    ])
                )
                return
            
            logger.info(f"üîç –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id_db}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            companies = self._get_user_companies(user_id_db)
            
            if not companies:
                # –ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–π - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å
                await query.edit_message_text(
                    "üè¢ <b>–ú–û–ò –ö–û–ú–ü–ê–ù–ò–ò</b>\n\n"
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π.\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã!",
                    parse_mode='HTML',
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é", callback_data="add_company")],
                        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
                    ])
                )
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)
                companies_text = f"üè¢ <b>–ú–û–ò –ö–û–ú–ü–ê–ù–ò–ò</b> ({len(companies)} –∫–æ–º–ø–∞–Ω–∏–π)\n\n"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –∫–æ–º–ø–∞–Ω–∏–π
                display_companies = companies[:10]
                for i, company in enumerate(display_companies, 1):
                    companies_text += f"üè¢ {i}. <b>{company['name']}</b>\n"
                    companies_text += f"   üìÖ {company['registration_date']}\n"
                    companies_text += f"   üìç {company['registration_place']}\n"
                    if company.get('industry'):
                        companies_text += f"   üè≠ {company['industry']}\n"
                    if company.get('owner_name'):
                        companies_text += f"   üë§ {company['owner_name']}\n"
                    if company.get('director_name'):
                        companies_text += f"   üëî {company['director_name']}\n"
                    companies_text += "\n"
                
                if len(companies) > 10:
                    companies_text += f"... –∏ –µ—â–µ {len(companies) - 10} –∫–æ–º–ø–∞–Ω–∏–π\n\n"
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞)
                keyboard = []
                for company in display_companies[:5]:
                    company_name = company['name'][:20]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                    keyboard.append([
                        InlineKeyboardButton(
                            f"üè¢ {company_name}",
                            callback_data=f"select_company_{company['id']}"
                        )
                    ])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                keyboard.extend([
                    [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é", callback_data="add_company")],
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
                ])
                
                await query.edit_message_text(
                    companies_text,
                    parse_mode='HTML',
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –∫–æ–º–ø–∞–Ω–∏–π: {e}")
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
                ])
            )
    
    async def start_add_company(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏"""
        if not update.callback_query or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        query = update.callback_query
        
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.state_manager.set_user_state(user_id, BotState.COMPANY_NAME_INPUT)
            context.user_data['adding_company'] = True
            context.user_data['new_company'] = {}
            
            await query.edit_message_text(
                "üè¢ <b>–î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–û–ú–ü–ê–ù–ò–ò</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="companies_menu")]
                ])
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –∫–æ–º–ø–∞–Ω–∏—è–º", callback_data="companies_menu")]
                ])
            )
    
    async def handle_company_name_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏"""
        if not update.effective_user:
            return
            
        user_id = update.effective_user.id
        
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            is_valid, error_msg = self._validate_company_name(text)
            if not is_valid:
                await update.message.reply_text(
                    f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="companies_menu")]
                    ])
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            context.user_data['new_company']['name'] = text.strip()
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            self.state_manager.set_user_state(user_id, BotState.COMPANY_REG_DATE_INPUT)
            
            await update.message.reply_text(
                "üìÖ <b>–î–ê–¢–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 2020-05-15",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="companies_menu")]
                ])
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –∫–æ–º–ø–∞–Ω–∏—è–º", callback_data="companies_menu")]
                ])
            )
    
    async def handle_registration_date_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        if not update.effective_user:
            return
            
        user_id = update.effective_user.id
        
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞—Ç—É
            is_valid, error_msg = self._validate_registration_date(text)
            if not is_valid:
                await update.message.reply_text(
                    f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="companies_menu")]
                    ])
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
            context.user_data['new_company']['reg_date'] = text.strip()
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –º–µ—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            self.state_manager.set_user_state(user_id, BotState.COMPANY_REG_PLACE_INPUT)
            
            await update.message.reply_text(
                "üìç <b>–ú–ï–°–¢–û –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏:\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="companies_menu")]
                ])
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –∫–æ–º–ø–∞–Ω–∏—è–º", callback_data="companies_menu")]
                ])
            )
    
    async def handle_registration_place_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–µ—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        if not update.effective_user:
            return
            
        user_id = update.effective_user.id
        
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –º–µ—Å—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            is_valid, error_msg = self._validate_registration_place(text)
            if not is_valid:
                await update.message.reply_text(
                    f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="companies_menu")]
                    ])
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            context.user_data['new_company']['reg_place'] = text.strip()
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ñ–µ—Ä—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self.state_manager.set_user_state(user_id, BotState.COMPANY_SPHERE_SELECTION)
            
            await update.message.reply_text(
                "üè≠ <b>–°–§–ï–†–ê –î–ï–Ø–¢–ï–õ–¨–ù–û–°–¢–ò</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏:",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üèóÔ∏è –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å", callback_data="sphere_construction")],
                    [InlineKeyboardButton("üí∞ –§–∏–Ω–∞–Ω—Å—ã –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", callback_data="sphere_finance")],
                    [InlineKeyboardButton("üõí –¢–æ—Ä–≥–æ–≤–ª—è –∏ —Å—Ñ–µ—Ä–∞ —É—Å–ª—É–≥", callback_data="sphere_trade")],
                    [InlineKeyboardButton("üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ —Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏", callback_data="sphere_tech")],
                    [InlineKeyboardButton("üèõÔ∏è –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ–∫—Ç–æ—Ä", callback_data="sphere_government")],
                    [InlineKeyboardButton("‚ö° –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞", callback_data="sphere_energy")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="companies_menu")]
                ])
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –∫–æ–º–ø–∞–Ω–∏—è–º", callback_data="companies_menu")]
                ])
            )
    
    async def handle_sphere_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ñ–µ—Ä—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not update.callback_query or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        query = update.callback_query
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user_id_db = self._get_or_create_user(
                user_id, 
                update.effective_user.username,
                update.effective_user.first_name,
                update.effective_user.last_name
            )
            
            if not user_id_db:
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
                    ])
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            context.user_data['new_company']['industry'] = callback_data.replace('sphere_', '').title()
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞
            self.state_manager.set_user_state(user_id, BotState.COMPANY_OWNER_NAME_INPUT)
            
            await query.edit_message_text(
                "üë§ <b>–î–ê–ù–ù–´–ï –°–û–ë–°–¢–í–ï–ù–ù–ò–ö–ê</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏:\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="companies_menu")]
                ])
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—Ñ–µ—Ä—ã: {e}")
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –∫–æ–º–ø–∞–Ω–∏—è–º", callback_data="companies_menu")]
                ])
            )
    
    async def handle_owner_name_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞"""
        if not update.effective_user:
            return
            
        user_id = update.effective_user.id
        
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –§–ò–û
            is_valid, error_msg = self._validate_person_name(text)
            if not is_valid:
                await update.message.reply_text(
                    f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="companies_menu")]
                    ])
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞
            context.user_data['new_company']['owner_name'] = text.strip()
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞
            self.state_manager.set_user_state(user_id, BotState.COMPANY_OWNER_BIRTH_INPUT)
            
            await update.message.reply_text(
                "üìÖ <b>–î–ê–¢–ê –†–û–ñ–î–ï–ù–ò–Ø –°–û–ë–°–¢–í–ï–ù–ù–ò–ö–ê</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 1980-05-15",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="companies_menu")]
                ])
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –§–ò–û —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –∫–æ–º–ø–∞–Ω–∏—è–º", callback_data="companies_menu")]
                ])
            )
    
    async def handle_owner_birth_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞"""
        if not update.effective_user:
            return
            
        user_id = update.effective_user.id
        
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞—Ç—É
            is_valid, error_msg = self._validate_birth_date(text)
            if not is_valid:
                await update.message.reply_text(
                    f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="companies_menu")]
                    ])
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞
            context.user_data['new_company']['owner_birth_date'] = text.strip()
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –¥–∞–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
            self.state_manager.set_user_state(user_id, BotState.COMPANY_DIRECTOR_NAME_INPUT)
            
            await update.message.reply_text(
                "üëî <b>–î–ê–ù–ù–´–ï –î–ò–†–ï–ö–¢–û–†–ê</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏:\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á\n\n"
                "üí° <i>–ï—Å–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä - –æ–¥–Ω–æ –ª–∏—Ü–æ, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ –∂–µ –¥–∞–Ω–Ω—ã–µ</i>",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="companies_menu")]
                ])
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –∫–æ–º–ø–∞–Ω–∏—è–º", callback_data="companies_menu")]
                ])
            )
    
    async def handle_director_name_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞"""
        if not update.effective_user:
            return
            
        user_id = update.effective_user.id
        
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –§–ò–û
            is_valid, error_msg = self._validate_person_name(text)
            if not is_valid:
                await update.message.reply_text(
                    f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="companies_menu")]
                    ])
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
            context.user_data['new_company']['director_name'] = text.strip()
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
            self.state_manager.set_user_state(user_id, BotState.COMPANY_DIRECTOR_BIRTH_INPUT)
            
            await update.message.reply_text(
                "üìÖ <b>–î–ê–¢–ê –†–û–ñ–î–ï–ù–ò–Ø –î–ò–†–ï–ö–¢–û–†–ê</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 1975-08-20",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="companies_menu")]
                ])
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –§–ò–û –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –∫–æ–º–ø–∞–Ω–∏—è–º", callback_data="companies_menu")]
                ])
            )
    
    async def handle_director_birth_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞"""
        if not update.effective_user:
            return
            
        user_id = update.effective_user.id
        
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞—Ç—É
            is_valid, error_msg = self._validate_birth_date(text)
            if not is_valid:
                await update.message.reply_text(
                    f"‚ùå {error_msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="companies_menu")]
                    ])
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
            context.user_data['new_company']['director_birth_date'] = text.strip()
            
            # –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            user_id_db = self._get_or_create_user(
                user_id, 
                update.effective_user.username,
                update.effective_user.first_name,
                update.effective_user.last_name
            )
            
            if not user_id_db:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
                    ])
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
            new_company_data = context.user_data.get('new_company', {})
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            company = self._create_company_full(
                user_id=user_id_db,
                name=new_company_data.get('name'),
                registration_date=datetime.strptime(new_company_data.get('reg_date'), '%Y-%m-%d'),
                registration_place=new_company_data.get('reg_place'),
                industry=new_company_data.get('industry'),
                owner_name=new_company_data.get('owner_name'),
                owner_birth_date=datetime.strptime(new_company_data.get('owner_birth_date'), '%Y-%m-%d'),
                director_name=new_company_data.get('director_name'),
                director_birth_date=datetime.strptime(new_company_data.get('director_birth_date'), '%Y-%m-%d')
            )
            
            if not company:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ö –∫–æ–º–ø–∞–Ω–∏—è–º", callback_data="companies_menu")]
                    ])
                )
                return
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.state_manager.set_user_state(user_id, BotState.MAIN_MENU)
            context.user_data.pop('adding_company', None)
            context.user_data.pop('new_company', None)
            
            await update.message.reply_text(
                f"‚úÖ <b>–ö–û–ú–ü–ê–ù–ò–Ø –î–û–ë–ê–í–õ–ï–ù–ê!</b>\n\n"
                f"üè¢ <b>{company['name']}</b>\n"
                f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {company['registration_date']}\n"
                f"üìç –ú–µ—Å—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {company['registration_place']}\n"
                f"üè≠ –°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {company['industry']}\n"
                f"üë§ –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫: {company['owner_name']}\n"
                f"üëî –î–∏—Ä–µ–∫—Ç–æ—Ä: {company['director_name']}\n\n"
                "–ö–æ–º–ø–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üè¢ –ú–æ–∏ –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="companies_menu")],
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
                ])
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –∫–æ–º–ø–∞–Ω–∏—è–º", callback_data="companies_menu")]
                ])
            )
    
    async def select_company(self, update: Update, context: ContextTypes.DEFAULT_TYPE, company_id: str):
        """–í—ã–±–æ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π"""
        if not update.callback_query or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        query = update.callback_query
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
            company_data = await self._get_company_data(user_id, company_id)
            if not company_data:
                await query.edit_message_text(
                    "‚ùå –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ö –∫–æ–º–ø–∞–Ω–∏—è–º", callback_data="companies_menu")]
                    ])
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–º–ø–∞–Ω–∏–µ–π
            company_name = company_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            await query.edit_message_text(
                f"üè¢ <b>{company_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚≠ê –°–¥–µ–ª–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–π", callback_data=f"set_active_company_{company_id}")],
                    [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_company_{company_id}")],
                    [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_company_{company_id}")],
                    [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –∫–æ–º–ø–∞–Ω–∏–π", callback_data="companies_menu")]
                ])
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –∫–æ–º–ø–∞–Ω–∏—è–º", callback_data="companies_menu")]
                ])
            )
    
    async def set_active_company(self, update: Update, context: ContextTypes.DEFAULT_TYPE, company_id: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏"""
        if not update.callback_query or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        query = update.callback_query
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = self.state_manager.get_user_data(user_id)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é
            user_data['active_company_id'] = company_id
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            self.state_manager.save_user_data(user_id, user_data)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            company_data = await self._get_company_data(user_id, company_id)
            company_name = company_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if company_data else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            
            await query.edit_message_text(
                f"‚úÖ <b>–ê–ö–¢–ò–í–ù–ê–Ø –ö–û–ú–ü–ê–ù–ò–Ø –£–°–¢–ê–ù–û–í–õ–ï–ù–ê</b>\n\n"
                f"üè¢ <b>{company_name}</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—Å–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –±—É–¥—É—Ç —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å—Å—è –¥–ª—è —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏!",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üè¢ –ú–æ–∏ –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="companies_menu")],
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
                ])
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –∫–æ–º–ø–∞–Ω–∏—è–º", callback_data="companies_menu")]
                ])
            )
    
    async def delete_company(self, update: Update, context: ContextTypes.DEFAULT_TYPE, company_id: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"""
        if not update.callback_query or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        query = update.callback_query
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user_id_db = self._get_or_create_user(
                user_id, 
                update.effective_user.username,
                update.effective_user.first_name,
                update.effective_user.last_name
            )
            
            if not user_id_db:
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ö –∫–æ–º–ø–∞–Ω–∏—è–º", callback_data="companies_menu")]
                    ])
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            with get_session() as session:
                from sqlalchemy import text
                result = session.execute(
                    text("SELECT name FROM companies WHERE id = :company_id AND owner_id = :user_id AND is_active = 1"),
                    {"company_id": int(company_id), "user_id": user_id_db}
                )
                company_row = result.fetchone()
                
                if not company_row:
                    await query.edit_message_text(
                        "‚ùå –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üîô –ö –∫–æ–º–ø–∞–Ω–∏—è–º", callback_data="companies_menu")]
                        ])
                    )
                    return
                
                company_name = company_row[0]
                
                # –£–¥–∞–ª—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                success = self._delete_company(int(company_id), user_id_db)
                
                if not success:
                    await query.edit_message_text(
                        "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏.",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üîô –ö –∫–æ–º–ø–∞–Ω–∏—è–º", callback_data="companies_menu")]
                        ])
                    )
                    return
            
            await query.edit_message_text(
                f"‚úÖ <b>–ö–û–ú–ü–ê–ù–ò–Ø –£–î–ê–õ–ï–ù–ê</b>\n\n"
                f"üè¢ <b>{company_name}</b>\n\n"
                "–ö–æ–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üè¢ –ú–æ–∏ –∫–æ–º–ø–∞–Ω–∏–∏", callback_data="companies_menu")],
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
                ])
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: {e}")
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –∫–æ–º–ø–∞–Ω–∏—è–º", callback_data="companies_menu")]
                ])
            )

# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
"""

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from .base_handler import BaseHandler
from utils.logger import setup_logger
from ai_astrologist.prompts import DAILY_FORECAST_PROMPT
from datetime import datetime, timedelta
import json

logger = setup_logger()


class DailyHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
    
    def __init__(self):
        super().__init__()
        self.user_states = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    async def show_daily_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
        if not update.callback_query or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        today = datetime.now()
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="daily_today")],
            [InlineKeyboardButton("üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="daily_tomorrow")],
            [InlineKeyboardButton("üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data="daily_week")],
            [InlineKeyboardButton("üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü", callback_data="daily_month")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            f"üìÖ **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã**\n\n"
            f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {today.strftime('%d.%m.%Y')}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def start_daily_forecast(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑"""
        if not update.callback_query or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        callback_data = update.callback_query.data
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∞
        forecast_type = callback_data.replace("daily_", "")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states[user_id] = {
            'forecast_type': forecast_type,
            'step': 'waiting_for_company'
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        instructions = self._get_instructions_for_type(forecast_type)
        
        await update.callback_query.edit_message_text(
            f"üìÖ **{instructions['title']}**\n\n"
            f"{instructions['description']}\n\n"
            f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:",
            parse_mode='Markdown'
        )
    
    async def handle_company_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–º–ø–∞–Ω–∏–∏"""
        if not update.effective_user or not update.message:
            return
            
        user_id = update.effective_user.id
        
        if user_id not in self.user_states:
            return
            
        state = self.user_states[user_id]
        
        if state['step'] != 'waiting_for_company':
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é
        company_name = update.message.text.strip()
        state['company_name'] = company_name
        state['step'] = 'generating'
        
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        del self.user_states[user_id]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–≥–Ω–æ–∑–∞
        await self._perform_daily_forecast(update, context, state)
    
    async def _perform_daily_forecast(self, update: Update, context: ContextTypes.DEFAULT_TYPE, state: dict):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑"""
        user_id = update.effective_user.id
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            news_data = await self._get_news_data()
            
            # –ü–æ–ª—É—á–∞–µ–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            astro_data = await self._get_daily_astrology()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
            dates_info = self._get_dates_for_forecast(state['forecast_type'])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            prompt = DAILY_FORECAST_PROMPT.format(
                company_name=state['company_name'],
                forecast_period=dates_info['period'],
                forecast_dates=dates_info['dates'],
                news_context=news_data,
                astrological_context=astro_data
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            await update.message.reply_text(
                f"üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É—é {dates_info['period']} –ø—Ä–æ–≥–Ω–æ–∑...\n\n"
                f"üè¢ **{state['company_name']}**\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {dates_info['dates']}\n"
                f"üì∞ –£—á–∏—Ç—ã–≤–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ",
                parse_mode='Markdown'
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ —á–µ—Ä–µ–∑ AI
            forecast = await self.astro_agent.generate_analysis(
                prompt=prompt,
                user_id=user_id,
                analysis_type="daily_forecast"
            )
            
            if forecast and forecast.get('content'):
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                validation_result = await self._validate_analysis(forecast['content'], "daily_forecast")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = f"üìÖ **{dates_info['period']} –ø—Ä–æ–≥–Ω–æ–∑**\n\n"
                message += f"üè¢ **{state['company_name']}**\n"
                message += f"üìÖ –ü–µ—Ä–∏–æ–¥: {dates_info['dates']}\n\n"
                message += forecast['content']
                
                if validation_result['score'] < 7:
                    message += f"\n\n‚ö†Ô∏è *–ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–∞: {validation_result['score']}/10*"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑", callback_data=f"daily_{state['forecast_type']}")],
                    [InlineKeyboardButton("üîô –ö –ø—Ä–æ–≥–Ω–æ–∑–∞–º", callback_data="daily_menu")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
                await self._send_long_message(
                    update.message, 
                    message, 
                    reply_markup=reply_markup
                )
                
                # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                await self._auto_save_analysis(user_id, forecast, "daily_forecast", f"{state['company_name']}_{dates_info['period']}")
                
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"daily_{state['forecast_type']}")
                    ]])
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö –ø—Ä–æ–≥–Ω–æ–∑–∞–º", callback_data="daily_menu")
                ]])
            )
    
    def _get_instructions_for_type(self, forecast_type: str) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        instructions_map = {
            'today': {
                'title': '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è',
                'description': '–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å'
            },
            'tomorrow': {
                'title': '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞',
                'description': '–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å'
            },
            'week': {
                'title': '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é',
                'description': '–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é'
            },
            'month': {
                'title': '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü',
                'description': '–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü'
            }
        }
        return instructions_map.get(forecast_type, instructions_map['today'])
    
    def _get_dates_for_forecast(self, forecast_type: str) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        today = datetime.now()
        
        if forecast_type == 'today':
            return {
                'period': '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π',
                'dates': today.strftime('%d.%m.%Y')
            }
        elif forecast_type == 'tomorrow':
            tomorrow = today + timedelta(days=1)
            return {
                'period': '–ù–∞ –∑–∞–≤—Ç—Ä–∞',
                'dates': tomorrow.strftime('%d.%m.%Y')
            }
        elif forecast_type == 'week':
            week_end = today + timedelta(days=7)
            return {
                'period': '–ù–µ–¥–µ–ª—å–Ω—ã–π',
                'dates': f"{today.strftime('%d.%m.%Y')} - {week_end.strftime('%d.%m.%Y')}"
            }
        elif forecast_type == 'month':
            month_end = today.replace(day=1) + timedelta(days=32)
            month_end = month_end.replace(day=1) - timedelta(days=1)
            return {
                'period': '–ú–µ—Å—è—á–Ω—ã–π',
                'dates': f"{today.strftime('%d.%m.%Y')} - {month_end.strftime('%d.%m.%Y')}"
            }
        else:
            return {
                'period': '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π',
                'dates': today.strftime('%d.%m.%Y')
            }
    
    def get_user_state(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.user_states.get(user_id, {})
    
    def clear_user_state(self, user_id: int):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.user_states:
            del self.user_states[user_id]

# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞
"""

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from .base_handler import BaseHandler
from utils.logger import setup_logger
from ai_astrologist.prompts import COMPANY_ZODIAC_INFO_PROMPT
import json
import os

logger = setup_logger()


class ZodiacHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞"""
    
    def __init__(self):
        super().__init__()
    
    async def show_zodiac_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞"""
        if not update.callback_query or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –∑–Ω–∞–∫–∞–º –∑–æ–¥–∏–∞–∫–∞
        companies_data = await self._load_companies_by_zodiac()
        
        keyboard = []
        for sign, companies in companies_data.items():
            button_text = f"{self._get_zodiac_emoji(sign)} {sign}"
            callback_data = f"zodiac_analysis_{sign}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "üîÆ **–ê–Ω–∞–ª–∏–∑ –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def analyze_zodiac_sign(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞"""
        if not update.callback_query or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        callback_data = update.callback_query.data
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –∏–∑ callback_data
        sign = callback_data.replace("zodiac_analysis_", "")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏—è—Ö —ç—Ç–æ–≥–æ –∑–Ω–∞–∫–∞
            companies_data = await self._load_companies_by_zodiac()
            sign_companies = companies_data.get(sign, [])
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            news_data = await self._get_news_data()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            prompt = COMPANY_ZODIAC_INFO_PROMPT.format(
                zodiac_sign=sign,
                companies=", ".join(sign_companies[:10]),  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 –∫–æ–º–ø–∞–Ω–∏–π
                news_context=news_data
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            await update.callback_query.edit_message_text(
                f"üîÆ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–Ω–∞–∫ **{sign}**...\n\n"
                f"üìä –ö–æ–º–ø–∞–Ω–∏–∏: {len(sign_companies)}\n"
                f"üì∞ –£—á–∏—Ç—ã–≤–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",
                parse_mode='Markdown'
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ AI
            analysis = await self.astro_agent.generate_analysis(
                prompt=prompt,
                user_id=user_id,
                analysis_type="zodiac_analysis"
            )
            
            if analysis and analysis.get('content'):
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                validation_result = await self._validate_analysis(analysis['content'], "zodiac_analysis")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = f"üîÆ **–ê–Ω–∞–ª–∏–∑ –∑–Ω–∞–∫–∞ {sign}**\n\n"
                message += analysis['content']
                
                if validation_result['score'] < 7:
                    message += f"\n\n‚ö†Ô∏è *–ö–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞: {validation_result['score']}/10*"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", callback_data=f"zodiac_analysis_{sign}")],
                    [InlineKeyboardButton("üîô –ö –∑–Ω–∞–∫–∞–º –∑–æ–¥–∏–∞–∫–∞", callback_data="zodiac_menu")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
                await self._send_long_message(
                    update.callback_query, 
                    message, 
                    reply_markup=reply_markup
                )
                
                # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                await self._auto_save_analysis(user_id, analysis, "zodiac_analysis", sign)
                
            else:
                await update.callback_query.edit_message_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∑–Ω–∞–∫–∞ {sign}.\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"zodiac_analysis_{sign}")
                    ]])
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ {sign}: {e}")
            await update.callback_query.edit_message_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–Ω–∞–∫–∞ {sign}.\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö –∑–Ω–∞–∫–∞–º –∑–æ–¥–∏–∞–∫–∞", callback_data="zodiac_menu")
                ]])
            )
    
    async def _load_companies_by_zodiac(self) -> dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π –ø–æ –∑–Ω–∞–∫–∞–º –∑–æ–¥–∏–∞–∫–∞"""
        try:
            companies_file = "ai_astrologist/known_companies.json"
            if os.path.exists(companies_file):
                with open(companies_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–∞–Ω–∏–π: {e}")
            return {}
    
    def _get_zodiac_emoji(self, sign: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞"""
        emoji_map = {
            "–û–≤–µ–Ω": "‚ôà",
            "–¢–µ–ª–µ—Ü": "‚ôâ", 
            "–ë–ª–∏–∑–Ω–µ—Ü—ã": "‚ôä",
            "–†–∞–∫": "‚ôã",
            "–õ–µ–≤": "‚ôå",
            "–î–µ–≤–∞": "‚ôç",
            "–í–µ—Å—ã": "‚ôé",
            "–°–∫–æ—Ä–ø–∏–æ–Ω": "‚ôè",
            "–°—Ç—Ä–µ–ª–µ—Ü": "‚ôê",
            "–ö–æ–∑–µ—Ä–æ–≥": "‚ôë",
            "–í–æ–¥–æ–ª–µ–π": "‚ôí",
            "–†—ã–±—ã": "‚ôì"
        }
        return emoji_map.get(sign, "üîÆ")

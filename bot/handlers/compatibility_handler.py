# -*- coding: utf-8 -*-
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
"""

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from .base_handler import BaseHandler
from utils.logger import setup_logger
from ai_astrologist.prompts import COMPATIBILITY_PROMPT
import json

logger = setup_logger()


class CompatibilityHandler(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    
    def __init__(self):
        super().__init__()
        self.user_states = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    async def show_compatibility_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        if not update.callback_query or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        
        keyboard = [
            [InlineKeyboardButton("üë• –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏–π", callback_data="compatibility_companies")],
            [InlineKeyboardButton("ü§ù –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º", callback_data="compatibility_partner")],
            [InlineKeyboardButton("üë§ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º", callback_data="compatibility_employee")],
            [InlineKeyboardButton("üè¢ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–º", callback_data="compatibility_counterparty")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "ü§ù **–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def start_compatibility_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        if not update.callback_query or not update.effective_user:
            return
            
        user_id = update.effective_user.id
        callback_data = update.callback_query.data
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞
        analysis_type = callback_data.replace("compatibility_", "")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states[user_id] = {
            'analysis_type': analysis_type,
            'step': 'waiting_for_first_object'
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        instructions = self._get_instructions_for_type(analysis_type)
        
        await update.callback_query.edit_message_text(
            f"ü§ù **–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {instructions['title']}**\n\n"
            f"{instructions['description']}\n\n"
            f"üìù **–®–∞–≥ 1 –∏–∑ 2:** {instructions['step1']}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º:",
            parse_mode='Markdown'
        )
    
    async def handle_first_object_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–µ—Ä–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞"""
        if not update.effective_user or not update.message:
            return
            
        user_id = update.effective_user.id
        
        if user_id not in self.user_states:
            return
            
        state = self.user_states[user_id]
        
        if state['step'] != 'waiting_for_first_object':
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç
        first_object = update.message.text.strip()
        state['first_object'] = first_object
        state['step'] = 'waiting_for_second_object'
        
        instructions = self._get_instructions_for_type(state['analysis_type'])
        
        await update.message.reply_text(
            f"‚úÖ –ü–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: **{first_object}**\n\n"
            f"üìù **–®–∞–≥ 2 –∏–∑ 2:** {instructions['step2']}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º:",
            parse_mode='Markdown'
        )
    
    async def handle_second_object_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ç–æ—Ä–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞"""
        if not update.effective_user or not update.message:
            return
            
        user_id = update.effective_user.id
        
        if user_id not in self.user_states:
            return
            
        state = self.user_states[user_id]
        
        if state['step'] != 'waiting_for_second_object':
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ç–æ—Ä–æ–π –æ–±—ä–µ–∫—Ç
        second_object = update.message.text.strip()
        state['second_object'] = second_object
        state['step'] = 'analyzing'
        
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        del self.user_states[user_id]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        await self._perform_compatibility_analysis(update, context, state)
    
    async def _perform_compatibility_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE, state: dict):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        user_id = update.effective_user.id
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            news_data = await self._get_news_data()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            prompt = COMPATIBILITY_PROMPT.format(
                object1_name=state['first_object'],
                object2_name=state['second_object'],
                object_status=state['analysis_type'],
                news_context=news_data
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            await update.message.reply_text(
                f"ü§ù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å...\n\n"
                f"üìä **{state['first_object']}** ‚ÜîÔ∏è **{state['second_object']}**\n"
                f"üì∞ –£—á–∏—Ç—ã–≤–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",
                parse_mode='Markdown'
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ AI
            analysis = await self.astro_agent.generate_analysis(
                prompt=prompt,
                user_id=user_id,
                analysis_type="compatibility_analysis"
            )
            
            if analysis and analysis.get('content'):
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                validation_result = await self._validate_analysis(analysis['content'], "compatibility_analysis")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = f"ü§ù **–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏**\n\n"
                message += f"**{state['first_object']}** ‚ÜîÔ∏è **{state['second_object']}**\n\n"
                message += analysis['content']
                
                if validation_result['score'] < 7:
                    message += f"\n\n‚ö†Ô∏è *–ö–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞: {validation_result['score']}/10*"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", callback_data=f"compatibility_{state['analysis_type']}")],
                    [InlineKeyboardButton("üîô –ö —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏", callback_data="compatibility_menu")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
                await self._send_long_message(
                    update.message, 
                    message, 
                    reply_markup=reply_markup
                )
                
                # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                await self._auto_save_analysis(user_id, analysis, "compatibility_analysis", f"{state['first_object']}‚ÜîÔ∏è{state['second_object']}")
                
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"compatibility_{state['analysis_type']}")
                    ]])
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏", callback_data="compatibility_menu")
                ]])
            )
    
    def _get_instructions_for_type(self, analysis_type: str) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        instructions_map = {
            'companies': {
                'title': '–ö–æ–º–ø–∞–Ω–∏–∏',
                'description': '–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –∫–æ–º–ø–∞–Ω–∏—è–º–∏',
                'step1': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏',
                'step2': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π –∫–æ–º–ø–∞–Ω–∏–∏'
            },
            'partner': {
                'title': '–ü–∞—Ä—Ç–Ω–µ—Ä',
                'description': '–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –¥–µ–ª–æ–≤—ã–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º',
                'step1': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏',
                'step2': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞'
            },
            'employee': {
                'title': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
                'description': '–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º',
                'step1': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏',
                'step2': '–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞'
            },
            'counterparty': {
                'title': '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç',
                'description': '–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–º',
                'step1': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏',
                'step2': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞'
            }
        }
        return instructions_map.get(analysis_type, instructions_map['companies'])
    
    def get_user_state(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.user_states.get(user_id, {})
    
    def clear_user_state(self, user_id: int):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.user_states:
            del self.user_states[user_id]

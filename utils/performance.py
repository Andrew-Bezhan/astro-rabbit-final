# -*- coding: utf-8 -*-
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
"""

import time
import asyncio
from typing import Dict, Any, Callable, Optional
from functools import wraps
from utils.logger import setup_logger
from utils.cache import cache_manager

logger = setup_logger()


class PerformanceMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.metrics: Dict[str, Dict[str, Any]] = {}
        self.start_time = time.time()
    
    def record_execution_time(self, func_name: str, execution_time: float, 
                            cache_hit: bool = False, error: Optional[str] = None):
        """–ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏"""
        if func_name not in self.metrics:
            self.metrics[func_name] = {
                'total_calls': 0,
                'total_time': 0.0,
                'cache_hits': 0,
                'errors': 0,
                'avg_time': 0.0,
                'max_time': 0.0,
                'min_time': float('inf')
            }
        
        metrics = self.metrics[func_name]
        metrics['total_calls'] += 1
        metrics['total_time'] += execution_time
        metrics['avg_time'] = metrics['total_time'] / metrics['total_calls']
        metrics['max_time'] = max(metrics['max_time'], execution_time)
        metrics['min_time'] = min(metrics['min_time'], execution_time)
        
        if cache_hit:
            metrics['cache_hits'] += 1
        
        if error:
            metrics['errors'] += 1
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        uptime = time.time() - self.start_time
        cache_stats = cache_manager.get_stats()
        
        return {
            'uptime': uptime,
            'functions': self.metrics,
            'cache': cache_stats,
            'total_functions': len(self.metrics),
            'total_calls': sum(m['total_calls'] for m in self.metrics.values()),
            'avg_response_time': sum(m['avg_time'] for m in self.metrics.values()) / len(self.metrics) if self.metrics else 0
        }
    
    def log_performance_summary(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        stats = self.get_stats()
        
        logger.info("üìä –°–í–û–î–ö–ê –ü–û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
        logger.info(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {stats['uptime']:.1f}—Å")
        logger.info(f"üîß –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {stats['total_functions']}")
        logger.info(f"üìû –í—Å–µ–≥–æ –≤—ã–∑–æ–≤–æ–≤: {stats['total_calls']}")
        logger.info(f"‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {stats['avg_response_time']:.3f}—Å")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
        cache = stats['cache']
        logger.info(f"üíæ –ö—ç—à: {cache['active_items']}/{cache['total_items']} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        
        # –¢–æ–ø –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        slow_functions = sorted(
            self.metrics.items(),
            key=lambda x: x[1]['avg_time'],
            reverse=True
        )[:3]
        
        if slow_functions:
            logger.info("üêå –°–∞–º—ã–µ –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
            for func_name, metrics in slow_functions:
                logger.info(f"  ‚Ä¢ {func_name}: {metrics['avg_time']:.3f}—Å (–≤—ã–∑–æ–≤–æ–≤: {metrics['total_calls']})")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
performance_monitor = PerformanceMonitor()


def monitor_performance(func_name: Optional[str] = None, log_slow_calls: bool = True, 
                       slow_threshold: float = 1.0):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    def decorator(func):
        name = func_name or func.__name__
        cache_hit = False
        
        @wraps(func)
        async def async_wrapper(*args, **kwargs):
            nonlocal cache_hit
            start_time = time.time()
            error = None
            
            try:
                result = await func(*args, **kwargs)
                return result
            except Exception as e:
                error = str(e)
                raise
            finally:
                execution_time = time.time() - start_time
                performance_monitor.record_execution_time(name, execution_time, cache_hit, error)
                
                if log_slow_calls and execution_time > slow_threshold:
                    logger.warning(f"üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ {name}: {execution_time:.3f}—Å")
        
        @wraps(func)
        def sync_wrapper(*args, **kwargs):
            nonlocal cache_hit
            start_time = time.time()
            error = None
            
            try:
                result = func(*args, **kwargs)
                return result
            except Exception as e:
                error = str(e)
                raise
            finally:
                execution_time = time.time() - start_time
                performance_monitor.record_execution_time(name, execution_time, cache_hit, error)
                
                if log_slow_calls and execution_time > slow_threshold:
                    logger.warning(f"üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ {name}: {execution_time:.3f}—Å")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–∂–Ω—É—é –æ–±–µ—Ä—Ç–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ—É–Ω–∫—Ü–∏–∏
        if asyncio.iscoroutinefunction(func):
            return async_wrapper
        else:
            return sync_wrapper
    
    return decorator


def log_performance_stats():
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    performance_monitor.log_performance_summary()


async def periodic_performance_log(interval: int = 300):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    while True:
        await asyncio.sleep(interval)
        log_performance_stats()


class RateLimiter:
    """–û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self, max_requests: int = 10, time_window: int = 60):
        self.max_requests = max_requests
        self.time_window = time_window
        self.requests: Dict[str, list] = {}
    
    def is_allowed(self, user_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        current_time = time.time()
        
        if user_id not in self.requests:
            self.requests[user_id] = []
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        self.requests[user_id] = [
            req_time for req_time in self.requests[user_id]
            if current_time - req_time < self.time_window
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(self.requests[user_id]) >= self.max_requests:
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        self.requests[user_id].append(current_time)
        return True
    
    def get_remaining_requests(self, user_id: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if user_id not in self.requests:
            return self.max_requests
        
        current_time = time.time()
        recent_requests = [
            req_time for req_time in self.requests[user_id]
            if current_time - req_time < self.time_window
        ]
        
        return max(0, self.max_requests - len(recent_requests))


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
rate_limiter = RateLimiter(max_requests=20, time_window=60)  # 20 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É


def rate_limit(user_id_key: str = "user_id"):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    def decorator(func):
        @wraps(func)
        async def async_wrapper(*args, **kwargs):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            user_id = None
            for arg in args:
                if hasattr(arg, user_id_key):
                    user_id = str(getattr(arg, user_id_key))
                    break
            
            if not user_id:
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ kwargs
                user_id = str(kwargs.get(user_id_key, 'anonymous'))
            
            if not rate_limiter.is_allowed(user_id):
                remaining = rate_limiter.get_remaining_requests(user_id)
                raise Exception(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É. –û—Å—Ç–∞–ª–æ—Å—å: {remaining}")
            
            return await func(*args, **kwargs)
        
        @wraps(func)
        def sync_wrapper(*args, **kwargs):
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            user_id = None
            for arg in args:
                if hasattr(arg, user_id_key):
                    user_id = str(getattr(arg, user_id_key))
                    break
            
            if not user_id:
                user_id = str(kwargs.get(user_id_key, 'anonymous'))
            
            if not rate_limiter.is_allowed(user_id):
                remaining = rate_limiter.get_remaining_requests(user_id)
                raise Exception(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É. –û—Å—Ç–∞–ª–æ—Å—å: {remaining}")
            
            return func(*args, **kwargs)
        
        if asyncio.iscoroutinefunction(func):
            return async_wrapper
        else:
            return sync_wrapper
    
    return decorator


# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
__all__ = [
    'PerformanceMonitor',
    'performance_monitor',
    'monitor_performance',
    'log_performance_stats',
    'periodic_performance_log',
    'RateLimiter',
    'rate_limiter',
    'rate_limit'
]
